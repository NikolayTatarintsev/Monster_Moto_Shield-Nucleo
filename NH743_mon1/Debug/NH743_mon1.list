
NH743_mon1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000427c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800468c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  0800469c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  0800469c  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c6a9  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000018e7  00000000  00000000  0002c72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b88  00000000  00000000  0002e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008f8  00000000  00000000  0002eba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000da92  00000000  00000000  0002f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00004347  00000000  00000000  0003cf2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00002fc8  00000000  00000000  00041274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000068  00000000  00000000  0004423c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080044fc 	.word	0x080044fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080044fc 	.word	0x080044fc

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fc84 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f84c 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f94e 	bl	8000584 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002e8:	f000 f8b2 	bl	8000450 <MX_TIM1_Init>

  /* ЗАПУСК ШИМ */

  /* Запуск ШИМ моста/мотора M1.
     Таймер 1, канал 2, Коннектор/Пин CN10/6, Порт PE11 (TIM1_CH2); */
     HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80002ec:	2104      	movs	r1, #4
 80002ee:	481f      	ldr	r0, [pc, #124]	; (800036c <main+0x94>)
 80002f0:	f002 fd26 	bl	8002d40 <HAL_TIM_PWM_Start_IT>

  /* ВРАЩЕНИЕ ЭЛЕКТРОДВИГАТЕЛЯ (МОТОРА) M1 ПРОТИВ ЧАСОВОЙ СТРЕЛКИ (CCW): */

	  /* Установка разрешения (EN1) на работу моста/мотора М1.
	     Коннектор/Пин CN9/1, Порт PA3; */
	  	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2108      	movs	r1, #8
 80002f8:	481d      	ldr	r0, [pc, #116]	; (8000370 <main+0x98>)
 80002fa:	f001 f8ed 	bl	80014d8 <HAL_GPIO_WritePin>

	  /* Разрешение на вращение мотора М1 против часовой стрелки (CCW).
	     Вход В драйвера 1 (INB1), Коннектор/Пин CN7/20, Порт PF3; */
	     HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2108      	movs	r1, #8
 8000302:	481c      	ldr	r0, [pc, #112]	; (8000374 <main+0x9c>)
 8000304:	f001 f8e8 	bl	80014d8 <HAL_GPIO_WritePin>

	  /* Запрет на вращение мотора М1 по часовой стрелке (CW).
	     Вход В драйвера 1 (INA1),Коннектор/Пин CN10/2, Порт PG12; */
	  	 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800030e:	481a      	ldr	r0, [pc, #104]	; (8000378 <main+0xa0>)
 8000310:	f001 f8e2 	bl	80014d8 <HAL_GPIO_WritePin>

	  /* Задержка времени на вращение мотора М1 против часовой стрелки */
	  	 HAL_Delay(5000);
 8000314:	f241 3088 	movw	r0, #5000	; 0x1388
 8000318:	f000 fcf8 	bl	8000d0c <HAL_Delay>
      /* Снятие разрешения (EN1) на работу моста/мотора М1.
         Коннектор/Пин CN9/1, Порт PA3; */
	  	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2108      	movs	r1, #8
 8000320:	4813      	ldr	r0, [pc, #76]	; (8000370 <main+0x98>)
 8000322:	f001 f8d9 	bl	80014d8 <HAL_GPIO_WritePin>
	     HAL_Delay(1000);
 8000326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032a:	f000 fcef 	bl	8000d0c <HAL_Delay>

  /* ВРАЩЕНИЕ ЭЛЕКТРОДВИГАТЕЛЯ (МОТОРА) M1 ПО ЧАСОВОЙ СТРЕЛКЕ (CW):

       /* Установка разрешения (EN1) на работу моста/мотора М1.
          Коннектор/Пин CN9/1, Порт PA3; */
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2108      	movs	r1, #8
 8000332:	480f      	ldr	r0, [pc, #60]	; (8000370 <main+0x98>)
 8000334:	f001 f8d0 	bl	80014d8 <HAL_GPIO_WritePin>

	   /* Разрешение на вращение мотора М1 по часовой стрелке (CW).
	      Вход В драйвера 1 (INA1), Коннектор/Пин CN10/2, Порт PG12; */
	  	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033e:	480e      	ldr	r0, [pc, #56]	; (8000378 <main+0xa0>)
 8000340:	f001 f8ca 	bl	80014d8 <HAL_GPIO_WritePin>

	   /* Запрет на вращение мотора М1 против часовой стрелки (CCW).
	  	  Вход В драйвера 1 (INB1), Коннектор/Пин CN7/20, Порт PF3; */
	   	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2108      	movs	r1, #8
 8000348:	480a      	ldr	r0, [pc, #40]	; (8000374 <main+0x9c>)
 800034a:	f001 f8c5 	bl	80014d8 <HAL_GPIO_WritePin>

	   	/* Задержка времени на вращение мотора М1 по часовой стрелке */
	   	   HAL_Delay(5000);
 800034e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000352:	f000 fcdb 	bl	8000d0c <HAL_Delay>

	   	/* Снятие разрешения (EN1) на работу моста/мотора М1.
	   	   Коннектор/Пин CN9/1, Порт PA3; */
	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2108      	movs	r1, #8
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <main+0x98>)
 800035c:	f001 f8bc 	bl	80014d8 <HAL_GPIO_WritePin>
	       HAL_Delay(1000);
 8000360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000364:	f000 fcd2 	bl	8000d0c <HAL_Delay>
	  	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000368:	e7c4      	b.n	80002f4 <main+0x1c>
 800036a:	bf00      	nop
 800036c:	2400002c 	.word	0x2400002c
 8000370:	58020000 	.word	0x58020000
 8000374:	58021400 	.word	0x58021400
 8000378:	58021800 	.word	0x58021800

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b09c      	sub	sp, #112	; 0x70
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000386:	224c      	movs	r2, #76	; 0x4c
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f004 f88a 	bl	80044a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2220      	movs	r2, #32
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f004 f884 	bl	80044a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800039c:	2002      	movs	r0, #2
 800039e:	f001 f8cf 	bl	8001540 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003a2:	2300      	movs	r3, #0
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	4b28      	ldr	r3, [pc, #160]	; (8000448 <SystemClock_Config+0xcc>)
 80003a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003aa:	4a27      	ldr	r2, [pc, #156]	; (8000448 <SystemClock_Config+0xcc>)
 80003ac:	f023 0301 	bic.w	r3, r3, #1
 80003b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003b2:	4b25      	ldr	r3, [pc, #148]	; (8000448 <SystemClock_Config+0xcc>)
 80003b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <SystemClock_Config+0xd0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003c4:	4a21      	ldr	r2, [pc, #132]	; (800044c <SystemClock_Config+0xd0>)
 80003c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1f      	ldr	r3, [pc, #124]	; (800044c <SystemClock_Config+0xd0>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d8:	bf00      	nop
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <SystemClock_Config+0xd0>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003e6:	d1f8      	bne.n	80003da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e8:	2302      	movs	r3, #2
 80003ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f0:	2340      	movs	r3, #64	; 0x40
 80003f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 f8e5 	bl	80015cc <HAL_RCC_OscConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000408:	f000 fa62 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040c:	233f      	movs	r3, #63	; 0x3f
 800040e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000418:	2309      	movs	r3, #9
 800041a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f001 fe7b 	bl	800212c <HAL_RCC_ClockConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800043c:	f000 fa48 	bl	80008d0 <Error_Handler>
  }
}
 8000440:	bf00      	nop
 8000442:	3770      	adds	r7, #112	; 0x70
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	58000400 	.word	0x58000400
 800044c:	58024800 	.word	0x58024800

08000450 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b096      	sub	sp, #88	; 0x58
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000456:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	222c      	movs	r2, #44	; 0x2c
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f004 f811 	bl	80044a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000482:	4b3e      	ldr	r3, [pc, #248]	; (800057c <MX_TIM1_Init+0x12c>)
 8000484:	4a3e      	ldr	r2, [pc, #248]	; (8000580 <MX_TIM1_Init+0x130>)
 8000486:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000488:	4b3c      	ldr	r3, [pc, #240]	; (800057c <MX_TIM1_Init+0x12c>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048e:	4b3b      	ldr	r3, [pc, #236]	; (800057c <MX_TIM1_Init+0x12c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8000494:	4b39      	ldr	r3, [pc, #228]	; (800057c <MX_TIM1_Init+0x12c>)
 8000496:	f247 5230 	movw	r2, #30000	; 0x7530
 800049a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049c:	4b37      	ldr	r3, [pc, #220]	; (800057c <MX_TIM1_Init+0x12c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004a2:	4b36      	ldr	r3, [pc, #216]	; (800057c <MX_TIM1_Init+0x12c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004a8:	4b34      	ldr	r3, [pc, #208]	; (800057c <MX_TIM1_Init+0x12c>)
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004ae:	4833      	ldr	r0, [pc, #204]	; (800057c <MX_TIM1_Init+0x12c>)
 80004b0:	f002 fb26 	bl	8002b00 <HAL_TIM_PWM_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80004ba:	f000 fa09 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80004be:	2310      	movs	r3, #16
 80004c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_ENABLE;
 80004c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004d0:	4619      	mov	r1, r3
 80004d2:	482a      	ldr	r0, [pc, #168]	; (800057c <MX_TIM1_Init+0x12c>)
 80004d4:	f003 fd48 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80004de:	f000 f9f7 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80004e2:	2370      	movs	r3, #112	; 0x70
 80004e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 7000;
 80004e6:	f641 3358 	movw	r3, #7000	; 0x1b58
 80004ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80004ec:	2302      	movs	r3, #2
 80004ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004f0:	2300      	movs	r3, #0
 80004f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80004f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004fe:	2300      	movs	r3, #0
 8000500:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000502:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000506:	2204      	movs	r2, #4
 8000508:	4619      	mov	r1, r3
 800050a:	481c      	ldr	r0, [pc, #112]	; (800057c <MX_TIM1_Init+0x12c>)
 800050c:	f002 fe40 	bl	8003190 <HAL_TIM_PWM_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000516:	f000 f9db 	bl	80008d0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_TIM1_Init+0x12c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	699a      	ldr	r2, [r3, #24]
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_TIM1_Init+0x12c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000528:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800053e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000542:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4619      	mov	r1, r3
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <MX_TIM1_Init+0x12c>)
 800055e:	f003 fe69 	bl	8004234 <HAL_TIMEx_ConfigBreakDeadTime>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8000568:	f000 f9b2 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <MX_TIM1_Init+0x12c>)
 800056e:	f000 fa23 	bl	80009b8 <HAL_TIM_MspPostInit>

}
 8000572:	bf00      	nop
 8000574:	3758      	adds	r7, #88	; 0x58
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2400002c 	.word	0x2400002c
 8000580:	40010000 	.word	0x40010000

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4bc0      	ldr	r3, [pc, #768]	; (800089c <MX_GPIO_Init+0x318>)
 800059c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a0:	4abe      	ldr	r2, [pc, #760]	; (800089c <MX_GPIO_Init+0x318>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005aa:	4bbc      	ldr	r3, [pc, #752]	; (800089c <MX_GPIO_Init+0x318>)
 80005ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	623b      	str	r3, [r7, #32]
 80005b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b8:	4bb8      	ldr	r3, [pc, #736]	; (800089c <MX_GPIO_Init+0x318>)
 80005ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005be:	4ab7      	ldr	r2, [pc, #732]	; (800089c <MX_GPIO_Init+0x318>)
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c8:	4bb4      	ldr	r3, [pc, #720]	; (800089c <MX_GPIO_Init+0x318>)
 80005ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	61fb      	str	r3, [r7, #28]
 80005d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	4bb1      	ldr	r3, [pc, #708]	; (800089c <MX_GPIO_Init+0x318>)
 80005d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005dc:	4aaf      	ldr	r2, [pc, #700]	; (800089c <MX_GPIO_Init+0x318>)
 80005de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e6:	4bad      	ldr	r3, [pc, #692]	; (800089c <MX_GPIO_Init+0x318>)
 80005e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f0:	61bb      	str	r3, [r7, #24]
 80005f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4ba9      	ldr	r3, [pc, #676]	; (800089c <MX_GPIO_Init+0x318>)
 80005f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fa:	4aa8      	ldr	r2, [pc, #672]	; (800089c <MX_GPIO_Init+0x318>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000604:	4ba5      	ldr	r3, [pc, #660]	; (800089c <MX_GPIO_Init+0x318>)
 8000606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4ba2      	ldr	r3, [pc, #648]	; (800089c <MX_GPIO_Init+0x318>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000618:	4aa0      	ldr	r2, [pc, #640]	; (800089c <MX_GPIO_Init+0x318>)
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000622:	4b9e      	ldr	r3, [pc, #632]	; (800089c <MX_GPIO_Init+0x318>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000628:	f003 0302 	and.w	r3, r3, #2
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000630:	4b9a      	ldr	r3, [pc, #616]	; (800089c <MX_GPIO_Init+0x318>)
 8000632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000636:	4a99      	ldr	r2, [pc, #612]	; (800089c <MX_GPIO_Init+0x318>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000640:	4b96      	ldr	r3, [pc, #600]	; (800089c <MX_GPIO_Init+0x318>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000646:	f003 0310 	and.w	r3, r3, #16
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b93      	ldr	r3, [pc, #588]	; (800089c <MX_GPIO_Init+0x318>)
 8000650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000654:	4a91      	ldr	r2, [pc, #580]	; (800089c <MX_GPIO_Init+0x318>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800065e:	4b8f      	ldr	r3, [pc, #572]	; (800089c <MX_GPIO_Init+0x318>)
 8000660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066c:	4b8b      	ldr	r3, [pc, #556]	; (800089c <MX_GPIO_Init+0x318>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000672:	4a8a      	ldr	r2, [pc, #552]	; (800089c <MX_GPIO_Init+0x318>)
 8000674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067c:	4b87      	ldr	r3, [pc, #540]	; (800089c <MX_GPIO_Init+0x318>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2108      	movs	r1, #8
 800068e:	4884      	ldr	r0, [pc, #528]	; (80008a0 <MX_GPIO_Init+0x31c>)
 8000690:	f000 ff22 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2101      	movs	r1, #1
 8000698:	4882      	ldr	r0, [pc, #520]	; (80008a4 <MX_GPIO_Init+0x320>)
 800069a:	f000 ff1d 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2108      	movs	r1, #8
 80006a2:	4881      	ldr	r0, [pc, #516]	; (80008a8 <MX_GPIO_Init+0x324>)
 80006a4:	f000 ff18 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f244 0101 	movw	r1, #16385	; 0x4001
 80006ae:	487f      	ldr	r0, [pc, #508]	; (80008ac <MX_GPIO_Init+0x328>)
 80006b0:	f000 ff12 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f240 2102 	movw	r1, #514	; 0x202
 80006ba:	487d      	ldr	r0, [pc, #500]	; (80008b0 <MX_GPIO_Init+0x32c>)
 80006bc:	f000 ff0c 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 80006c6:	487b      	ldr	r0, [pc, #492]	; (80008b4 <MX_GPIO_Init+0x330>)
 80006c8:	f000 ff06 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	4879      	ldr	r0, [pc, #484]	; (80008b8 <MX_GPIO_Init+0x334>)
 80006d4:	f000 ff00 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ea:	4619      	mov	r1, r3
 80006ec:	486d      	ldr	r0, [pc, #436]	; (80008a4 <MX_GPIO_Init+0x320>)
 80006ee:	f000 fc45 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006f2:	2308      	movs	r3, #8
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fe:	2302      	movs	r3, #2
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	4619      	mov	r1, r3
 8000708:	4865      	ldr	r0, [pc, #404]	; (80008a0 <MX_GPIO_Init+0x31c>)
 800070a:	f000 fc37 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800070e:	2301      	movs	r3, #1
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2302      	movs	r3, #2
 800071c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	4619      	mov	r1, r3
 8000724:	485f      	ldr	r0, [pc, #380]	; (80008a4 <MX_GPIO_Init+0x320>)
 8000726:	f000 fc29 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800072a:	2332      	movs	r3, #50	; 0x32
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800073a:	230b      	movs	r3, #11
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000742:	4619      	mov	r1, r3
 8000744:	4857      	ldr	r0, [pc, #348]	; (80008a4 <MX_GPIO_Init+0x320>)
 8000746:	f000 fc19 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800074a:	2386      	movs	r3, #134	; 0x86
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075a:	230b      	movs	r3, #11
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000762:	4619      	mov	r1, r3
 8000764:	4850      	ldr	r0, [pc, #320]	; (80008a8 <MX_GPIO_Init+0x324>)
 8000766:	f000 fc09 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076a:	2308      	movs	r3, #8
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	2302      	movs	r3, #2
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	4619      	mov	r1, r3
 8000780:	4849      	ldr	r0, [pc, #292]	; (80008a8 <MX_GPIO_Init+0x324>)
 8000782:	f000 fbfb 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000786:	f244 0301 	movw	r3, #16385	; 0x4001
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	4843      	ldr	r0, [pc, #268]	; (80008ac <MX_GPIO_Init+0x328>)
 80007a0:	f000 fbec 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD2_Pin;
 80007a4:	f240 2302 	movw	r3, #514	; 0x202
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	483c      	ldr	r0, [pc, #240]	; (80008b0 <MX_GPIO_Init+0x32c>)
 80007be:	f000 fbdd 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d4:	230b      	movs	r3, #11
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4833      	ldr	r0, [pc, #204]	; (80008ac <MX_GPIO_Init+0x328>)
 80007e0:	f000 fbcc 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80007e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007f6:	2307      	movs	r3, #7
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	482c      	ldr	r0, [pc, #176]	; (80008b4 <MX_GPIO_Init+0x330>)
 8000802:	f000 fbbb 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD15 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_15;
 8000806:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	4825      	ldr	r0, [pc, #148]	; (80008b4 <MX_GPIO_Init+0x330>)
 8000820:	f000 fbac 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000828:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	481f      	ldr	r0, [pc, #124]	; (80008b8 <MX_GPIO_Init+0x334>)
 800083a:	f000 fb9f 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800083e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000850:	230a      	movs	r3, #10
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_GPIO_Init+0x324>)
 800085c:	f000 fb8e 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000860:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000872:	230b      	movs	r3, #11
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_GPIO_Init+0x334>)
 800087e:	f000 fb7d 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2302      	movs	r3, #2
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	e010      	b.n	80008bc <MX_GPIO_Init+0x338>
 800089a:	bf00      	nop
 800089c:	58024400 	.word	0x58024400
 80008a0:	58021400 	.word	0x58021400
 80008a4:	58020800 	.word	0x58020800
 80008a8:	58020000 	.word	0x58020000
 80008ac:	58020400 	.word	0x58020400
 80008b0:	58021000 	.word	0x58021000
 80008b4:	58020c00 	.word	0x58020c00
 80008b8:	58021800 	.word	0x58021800
 80008bc:	4619      	mov	r1, r3
 80008be:	4803      	ldr	r0, [pc, #12]	; (80008cc <MX_GPIO_Init+0x348>)
 80008c0:	f000 fb5c 	bl	8000f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3738      	adds	r7, #56	; 0x38
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	58021800 	.word	0x58021800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>

080008da <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_MspInit+0x30>)
 80008f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x30>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x30>)
 8000908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	58024400 	.word	0x58024400

08000924 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <HAL_TIM_PWM_MspInit+0x88>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12e      	bne.n	80009a4 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800094c:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <HAL_TIM_PWM_MspInit+0x8c>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <HAL_TIM_PWM_MspInit+0x8c>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000994:	2301      	movs	r3, #1
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_TIM_PWM_MspInit+0x90>)
 80009a0:	f000 faec 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40010000 	.word	0x40010000
 80009b0:	58024400 	.word	0x58024400
 80009b4:	58021000 	.word	0x58021000

080009b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_TIM_MspPostInit+0x6c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d11f      	bne.n	8000a1a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_TIM_MspPostInit+0x70>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <HAL_TIM_MspPostInit+0x70>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_TIM_MspPostInit+0x70>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_TIM_MspPostInit+0x74>)
 8000a16:	f000 fab1 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40010000 	.word	0x40010000
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	58021000 	.word	0x58021000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f926 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a88:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <SystemInit+0xe4>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a36      	ldr	r2, [pc, #216]	; (8000b68 <SystemInit+0xe4>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a98:	4b34      	ldr	r3, [pc, #208]	; (8000b6c <SystemInit+0xe8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	2b06      	cmp	r3, #6
 8000aa2:	d807      	bhi.n	8000ab4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <SystemInit+0xe8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f023 030f 	bic.w	r3, r3, #15
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <SystemInit+0xe8>)
 8000aae:	f043 0307 	orr.w	r3, r3, #7
 8000ab2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <SystemInit+0xec>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <SystemInit+0xec>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <SystemInit+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <SystemInit+0xec>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4929      	ldr	r1, [pc, #164]	; (8000b70 <SystemInit+0xec>)
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemInit+0xf0>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <SystemInit+0xe8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d007      	beq.n	8000aee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <SystemInit+0xe8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f023 030f 	bic.w	r3, r3, #15
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <SystemInit+0xe8>)
 8000ae8:	f043 0307 	orr.w	r3, r3, #7
 8000aec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <SystemInit+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <SystemInit+0xec>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <SystemInit+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <SystemInit+0xec>)
 8000b02:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <SystemInit+0xf4>)
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <SystemInit+0xec>)
 8000b08:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <SystemInit+0xf8>)
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <SystemInit+0xec>)
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <SystemInit+0xfc>)
 8000b10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <SystemInit+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <SystemInit+0xec>)
 8000b1a:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <SystemInit+0xfc>)
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <SystemInit+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <SystemInit+0xec>)
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <SystemInit+0xfc>)
 8000b28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <SystemInit+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <SystemInit+0xec>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <SystemInit+0xec>)
 8000b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <SystemInit+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <SystemInit+0x100>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <SystemInit+0x104>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b4e:	d202      	bcs.n	8000b56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <SystemInit+0x108>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <SystemInit+0x10c>)
 8000b58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	52002000 	.word	0x52002000
 8000b70:	58024400 	.word	0x58024400
 8000b74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b78:	02020200 	.word	0x02020200
 8000b7c:	01ff0000 	.word	0x01ff0000
 8000b80:	01010280 	.word	0x01010280
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b98:	f7ff ff74 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f003 fc77 	bl	80044b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fb87 	bl	80002d8 <main>
  bx  lr
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bd4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bd8:	0800468c 	.word	0x0800468c
  ldr r2, =_sbss
 8000bdc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000be0:	2400007c 	.word	0x2400007c

08000be4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC3_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 f96e 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bf4:	f001 fe0a 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_Init+0x68>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	4913      	ldr	r1, [pc, #76]	; (8000c54 <HAL_Init+0x6c>)
 8000c06:	5ccb      	ldrb	r3, [r1, r3]
 8000c08:	f003 031f 	and.w	r3, r3, #31
 8000c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_Init+0x68>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_Init+0x6c>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	fa22 f303 	lsr.w	r3, r2, r3
 8000c28:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_Init+0x70>)
 8000c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <HAL_Init+0x74>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f814 	bl	8000c60 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e002      	b.n	8000c48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c42:	f7ff fe55 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	58024400 	.word	0x58024400
 8000c54:	08004674 	.word	0x08004674
 8000c58:	24000004 	.word	0x24000004
 8000c5c:	24000000 	.word	0x24000000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_InitTick+0x60>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e021      	b.n	8000cb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_InitTick+0x64>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_InitTick+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f96a 	bl	8000f64 <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f932 	bl	8000f10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_InitTick+0x68>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2400000c 	.word	0x2400000c
 8000cc4:	24000000 	.word	0x24000000
 8000cc8:	24000008 	.word	0x24000008

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2400000c 	.word	0x2400000c
 8000cf0:	24000078 	.word	0x24000078

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	24000078 	.word	0x24000078

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff ffee 	bl	8000cf4 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffde 	bl	8000cf4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2400000c 	.word	0x2400000c

08000d54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetREVID+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	0c1b      	lsrs	r3, r3, #16
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	5c001000 	.word	0x5c001000

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <__NVIC_SetPriorityGrouping+0x40>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x40>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	05fa0000 	.word	0x05fa0000

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	d00f      	beq.n	8000efe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d00c      	beq.n	8000efe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	d009      	beq.n	8000efe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d006      	beq.n	8000efe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d003      	beq.n	8000efe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ef6:	2191      	movs	r1, #145	; 0x91
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000efa:	f7ff fcee 	bl	80008da <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff34 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	08004514 	.word	0x08004514

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d903      	bls.n	8000f2c <HAL_NVIC_SetPriority+0x1c>
 8000f24:	21a9      	movs	r1, #169	; 0xa9
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <HAL_NVIC_SetPriority+0x50>)
 8000f28:	f7ff fcd7 	bl	80008da <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b0f      	cmp	r3, #15
 8000f30:	d903      	bls.n	8000f3a <HAL_NVIC_SetPriority+0x2a>
 8000f32:	21aa      	movs	r1, #170	; 0xaa
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <HAL_NVIC_SetPriority+0x50>)
 8000f36:	f7ff fcd0 	bl	80008da <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3a:	f7ff ff3b 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000f3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	6978      	ldr	r0, [r7, #20]
 8000f46:	f7ff ff6d 	bl	8000e24 <NVIC_EncodePriority>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff3c 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	08004514 	.word	0x08004514

08000f64 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff8d 	bl	8000e8c <SysTick_Config>
 8000f72:	4603      	mov	r3, r0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f8a:	4b44      	ldr	r3, [pc, #272]	; (800109c <HAL_GPIO_Init+0x120>)
 8000f8c:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a43      	ldr	r2, [pc, #268]	; (80010a0 <HAL_GPIO_Init+0x124>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d02b      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <HAL_GPIO_Init+0x128>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d027      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <HAL_GPIO_Init+0x12c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d023      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a40      	ldr	r2, [pc, #256]	; (80010ac <HAL_GPIO_Init+0x130>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01f      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a3f      	ldr	r2, [pc, #252]	; (80010b0 <HAL_GPIO_Init+0x134>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d01b      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a3e      	ldr	r2, [pc, #248]	; (80010b4 <HAL_GPIO_Init+0x138>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d017      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a3d      	ldr	r2, [pc, #244]	; (80010b8 <HAL_GPIO_Init+0x13c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a3c      	ldr	r2, [pc, #240]	; (80010bc <HAL_GPIO_Init+0x140>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00f      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a3b      	ldr	r2, [pc, #236]	; (80010c0 <HAL_GPIO_Init+0x144>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00b      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <HAL_GPIO_Init+0x148>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <HAL_GPIO_Init+0x14c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x72>
 8000fe6:	21b3      	movs	r1, #179	; 0xb3
 8000fe8:	4838      	ldr	r0, [pc, #224]	; (80010cc <HAL_GPIO_Init+0x150>)
 8000fea:	f7ff fc76 	bl	80008da <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_GPIO_Init+0x88>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <HAL_GPIO_Init+0x154>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x90>
 8001004:	21b4      	movs	r1, #180	; 0xb4
 8001006:	4831      	ldr	r0, [pc, #196]	; (80010cc <HAL_GPIO_Init+0x150>)
 8001008:	f7ff fc67 	bl	80008da <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 8252 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	f000 824d 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b11      	cmp	r3, #17
 8001026:	f000 8248 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	f000 8243 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b12      	cmp	r3, #18
 800103a:	f000 823e 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001046:	f000 8238 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001052:	f000 8232 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800105e:	f000 822c 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800106a:	f000 8226 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001076:	f000 8220 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001082:	f000 821a 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	f000 8215 	beq.w	80014ba <HAL_GPIO_Init+0x53e>
 8001090:	21b5      	movs	r1, #181	; 0xb5
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <HAL_GPIO_Init+0x150>)
 8001094:	f7ff fc21 	bl	80008da <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001098:	e20f      	b.n	80014ba <HAL_GPIO_Init+0x53e>
 800109a:	bf00      	nop
 800109c:	58000080 	.word	0x58000080
 80010a0:	58020000 	.word	0x58020000
 80010a4:	58020400 	.word	0x58020400
 80010a8:	58020800 	.word	0x58020800
 80010ac:	58020c00 	.word	0x58020c00
 80010b0:	58021000 	.word	0x58021000
 80010b4:	58021400 	.word	0x58021400
 80010b8:	58021800 	.word	0x58021800
 80010bc:	58021c00 	.word	0x58021c00
 80010c0:	58022000 	.word	0x58022000
 80010c4:	58022400 	.word	0x58022400
 80010c8:	58022800 	.word	0x58022800
 80010cc:	08004550 	.word	0x08004550
 80010d0:	ffff0000 	.word	0xffff0000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 81e4 	beq.w	80014b4 <HAL_GPIO_Init+0x538>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d005      	beq.n	8001104 <HAL_GPIO_Init+0x188>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d144      	bne.n	800118e <HAL_GPIO_Init+0x212>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00f      	beq.n	800112c <HAL_GPIO_Init+0x1b0>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d00b      	beq.n	800112c <HAL_GPIO_Init+0x1b0>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1b0>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x1b0>
 8001124:	21c4      	movs	r1, #196	; 0xc4
 8001126:	489a      	ldr	r0, [pc, #616]	; (8001390 <HAL_GPIO_Init+0x414>)
 8001128:	f7ff fbd7 	bl	80008da <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001162:	2201      	movs	r2, #1
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 0201 	and.w	r2, r3, #1
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b03      	cmp	r3, #3
 8001198:	d027      	beq.n	80011ea <HAL_GPIO_Init+0x26e>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_GPIO_Init+0x23e>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x23e>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x23e>
 80011b2:	21d6      	movs	r1, #214	; 0xd6
 80011b4:	4876      	ldr	r0, [pc, #472]	; (8001390 <HAL_GPIO_Init+0x414>)
 80011b6:	f7ff fb90 	bl	80008da <assert_failed>

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d15b      	bne.n	80012ae <HAL_GPIO_Init+0x332>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a66      	ldr	r2, [pc, #408]	; (8001394 <HAL_GPIO_Init+0x418>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02b      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a65      	ldr	r2, [pc, #404]	; (8001398 <HAL_GPIO_Init+0x41c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d027      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a64      	ldr	r2, [pc, #400]	; (800139c <HAL_GPIO_Init+0x420>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d023      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a63      	ldr	r2, [pc, #396]	; (80013a0 <HAL_GPIO_Init+0x424>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a62      	ldr	r2, [pc, #392]	; (80013a4 <HAL_GPIO_Init+0x428>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01b      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a61      	ldr	r2, [pc, #388]	; (80013a8 <HAL_GPIO_Init+0x42c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d017      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a60      	ldr	r2, [pc, #384]	; (80013ac <HAL_GPIO_Init+0x430>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <HAL_GPIO_Init+0x434>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00f      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <HAL_GPIO_Init+0x438>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00b      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a5d      	ldr	r2, [pc, #372]	; (80013b8 <HAL_GPIO_Init+0x43c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a5c      	ldr	r2, [pc, #368]	; (80013bc <HAL_GPIO_Init+0x440>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
 800124e:	21e3      	movs	r1, #227	; 0xe3
 8001250:	484f      	ldr	r0, [pc, #316]	; (8001390 <HAL_GPIO_Init+0x414>)
 8001252:	f7ff fb42 	bl	80008da <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d903      	bls.n	8001266 <HAL_GPIO_Init+0x2ea>
 800125e:	21e4      	movs	r1, #228	; 0xe4
 8001260:	484b      	ldr	r0, [pc, #300]	; (8001390 <HAL_GPIO_Init+0x414>)
 8001262:	f7ff fb3a 	bl	80008da <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	69b9      	ldr	r1, [r7, #24]
 80012aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0203 	and.w	r2, r3, #3
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80e2 	beq.w	80014b4 <HAL_GPIO_Init+0x538>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_GPIO_Init+0x444>)
 80012f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f6:	4a32      	ldr	r2, [pc, #200]	; (80013c0 <HAL_GPIO_Init+0x444>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0x444>)
 8001302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <HAL_GPIO_Init+0x448>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_GPIO_Init+0x418>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d054      	beq.n	80013e4 <HAL_GPIO_Init+0x468>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_GPIO_Init+0x41c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d04e      	beq.n	80013e0 <HAL_GPIO_Init+0x464>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a15      	ldr	r2, [pc, #84]	; (800139c <HAL_GPIO_Init+0x420>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d048      	beq.n	80013dc <HAL_GPIO_Init+0x460>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_GPIO_Init+0x424>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d042      	beq.n	80013d8 <HAL_GPIO_Init+0x45c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <HAL_GPIO_Init+0x428>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d03c      	beq.n	80013d4 <HAL_GPIO_Init+0x458>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_GPIO_Init+0x42c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d036      	beq.n	80013d0 <HAL_GPIO_Init+0x454>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_GPIO_Init+0x430>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d030      	beq.n	80013cc <HAL_GPIO_Init+0x450>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_GPIO_Init+0x434>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d02a      	beq.n	80013c8 <HAL_GPIO_Init+0x44c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_GPIO_Init+0x438>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x40e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_GPIO_Init+0x43c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x40a>
 8001382:	2309      	movs	r3, #9
 8001384:	e02f      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 8001386:	230a      	movs	r3, #10
 8001388:	e02d      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 800138a:	2308      	movs	r3, #8
 800138c:	e02b      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 800138e:	bf00      	nop
 8001390:	08004550 	.word	0x08004550
 8001394:	58020000 	.word	0x58020000
 8001398:	58020400 	.word	0x58020400
 800139c:	58020800 	.word	0x58020800
 80013a0:	58020c00 	.word	0x58020c00
 80013a4:	58021000 	.word	0x58021000
 80013a8:	58021400 	.word	0x58021400
 80013ac:	58021800 	.word	0x58021800
 80013b0:	58021c00 	.word	0x58021c00
 80013b4:	58022000 	.word	0x58022000
 80013b8:	58022400 	.word	0x58022400
 80013bc:	58022800 	.word	0x58022800
 80013c0:	58024400 	.word	0x58024400
 80013c4:	58000400 	.word	0x58000400
 80013c8:	2307      	movs	r3, #7
 80013ca:	e00c      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 80013cc:	2306      	movs	r3, #6
 80013ce:	e00a      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 80013d0:	2305      	movs	r3, #5
 80013d2:	e008      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 80013d4:	2304      	movs	r3, #4
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 80013d8:	2303      	movs	r3, #3
 80013da:	e004      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 80013dc:	2302      	movs	r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_Init+0x46a>
 80013e4:	2300      	movs	r3, #0
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f6:	4937      	ldr	r1, [pc, #220]	; (80014d4 <HAL_GPIO_Init+0x558>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x4ae>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800142a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x4dc>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x508>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x532>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3301      	adds	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f47f ae05 	bne.w	80010d4 <HAL_GPIO_Init+0x158>
  }
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	58000400 	.word	0x58000400

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <HAL_GPIO_WritePin+0x20>
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_GPIO_WritePin+0x60>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_GPIO_WritePin+0x2a>
 80014f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80014fc:	480f      	ldr	r0, [pc, #60]	; (800153c <HAL_GPIO_WritePin+0x64>)
 80014fe:	f7ff f9ec 	bl	80008da <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001502:	787b      	ldrb	r3, [r7, #1]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_WritePin+0x40>
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d004      	beq.n	8001518 <HAL_GPIO_WritePin+0x40>
 800150e:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001512:	480a      	ldr	r0, [pc, #40]	; (800153c <HAL_GPIO_WritePin+0x64>)
 8001514:	f7ff f9e1 	bl	80008da <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	ffff0000 	.word	0xffff0000
 800153c:	08004550 	.word	0x08004550

08001540 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d007      	beq.n	800155e <HAL_PWREx_ConfigSupply+0x1e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d004      	beq.n	800155e <HAL_PWREx_ConfigSupply+0x1e>
 8001554:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001558:	481a      	ldr	r0, [pc, #104]	; (80015c4 <HAL_PWREx_ConfigSupply+0x84>)
 800155a:	f7ff f9be 	bl	80008da <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_PWREx_ConfigSupply+0x88>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b04      	cmp	r3, #4
 8001568:	d00a      	beq.n	8001580 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_PWREx_ConfigSupply+0x88>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e01f      	b.n	80015bc <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	e01d      	b.n	80015bc <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_PWREx_ConfigSupply+0x88>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f023 0207 	bic.w	r2, r3, #7
 8001588:	490f      	ldr	r1, [pc, #60]	; (80015c8 <HAL_PWREx_ConfigSupply+0x88>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001590:	f7ff fbb0 	bl	8000cf4 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001596:	e009      	b.n	80015ac <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001598:	f7ff fbac 	bl	8000cf4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a6:	d901      	bls.n	80015ac <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e007      	b.n	80015bc <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_PWREx_ConfigSupply+0x88>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b8:	d1ee      	bne.n	8001598 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	0800458c 	.word	0x0800458c
 80015c8:	58024800 	.word	0x58024800

080015cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	f000 bd9c 	b.w	8002118 <HAL_RCC_OscConfig+0xb4c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d028      	beq.n	800163a <HAL_RCC_OscConfig+0x6e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d122      	bne.n	800163a <HAL_RCC_OscConfig+0x6e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11c      	bne.n	800163a <HAL_RCC_OscConfig+0x6e>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d116      	bne.n	800163a <HAL_RCC_OscConfig+0x6e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d110      	bne.n	800163a <HAL_RCC_OscConfig+0x6e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10a      	bne.n	800163a <HAL_RCC_OscConfig+0x6e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	2b00      	cmp	r3, #0
 800162e:	d104      	bne.n	800163a <HAL_RCC_OscConfig+0x6e>
 8001630:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001634:	4897      	ldr	r0, [pc, #604]	; (8001894 <HAL_RCC_OscConfig+0x2c8>)
 8001636:	f7ff f950 	bl	80008da <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 809d 	beq.w	8001782 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00e      	beq.n	800166e <HAL_RCC_OscConfig+0xa2>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d009      	beq.n	800166e <HAL_RCC_OscConfig+0xa2>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001662:	d004      	beq.n	800166e <HAL_RCC_OscConfig+0xa2>
 8001664:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001668:	488a      	ldr	r0, [pc, #552]	; (8001894 <HAL_RCC_OscConfig+0x2c8>)
 800166a:	f7ff f936 	bl	80008da <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166e:	4b8a      	ldr	r3, [pc, #552]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001678:	4b87      	ldr	r3, [pc, #540]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	2b10      	cmp	r3, #16
 8001682:	d007      	beq.n	8001694 <HAL_RCC_OscConfig+0xc8>
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	2b18      	cmp	r3, #24
 8001688:	d111      	bne.n	80016ae <HAL_RCC_OscConfig+0xe2>
 800168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0xe2>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	4b80      	ldr	r3, [pc, #512]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d06f      	beq.n	8001780 <HAL_RCC_OscConfig+0x1b4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d16b      	bne.n	8001780 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f000 bd35 	b.w	8002118 <HAL_RCC_OscConfig+0xb4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0xfa>
 80016b8:	4b77      	ldr	r3, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a76      	ldr	r2, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80016be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e02e      	b.n	8001724 <HAL_RCC_OscConfig+0x158>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x11c>
 80016ce:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a71      	ldr	r2, [pc, #452]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80016d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b6f      	ldr	r3, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6e      	ldr	r2, [pc, #440]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80016e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e01d      	b.n	8001724 <HAL_RCC_OscConfig+0x158>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x140>
 80016f2:	4b69      	ldr	r3, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a68      	ldr	r2, [pc, #416]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b66      	ldr	r3, [pc, #408]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a65      	ldr	r2, [pc, #404]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0x158>
 800170c:	4b62      	ldr	r3, [pc, #392]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a61      	ldr	r2, [pc, #388]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d014      	beq.n	8001756 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fae2 	bl	8000cf4 <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001732:	e009      	b.n	8001748 <HAL_RCC_OscConfig+0x17c>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fade 	bl	8000cf4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d902      	bls.n	8001748 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	f000 bce8 	b.w	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001748:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ef      	beq.n	8001734 <HAL_RCC_OscConfig+0x168>
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff facd 	bl	8000cf4 <HAL_GetTick>
 800175a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800175c:	e009      	b.n	8001772 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175e:	f7ff fac9 	bl	8000cf4 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d902      	bls.n	8001772 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	f000 bcd3 	b.w	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001772:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_OscConfig+0x192>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x1b6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80f5 	beq.w	800197a <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d018      	beq.n	80017ca <HAL_RCC_OscConfig+0x1fe>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d014      	beq.n	80017ca <HAL_RCC_OscConfig+0x1fe>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d010      	beq.n	80017ca <HAL_RCC_OscConfig+0x1fe>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b09      	cmp	r3, #9
 80017ae:	d00c      	beq.n	80017ca <HAL_RCC_OscConfig+0x1fe>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d008      	beq.n	80017ca <HAL_RCC_OscConfig+0x1fe>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b19      	cmp	r3, #25
 80017be:	d004      	beq.n	80017ca <HAL_RCC_OscConfig+0x1fe>
 80017c0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80017c4:	4833      	ldr	r0, [pc, #204]	; (8001894 <HAL_RCC_OscConfig+0x2c8>)
 80017c6:	f7ff f888 	bl	80008da <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b7f      	cmp	r3, #127	; 0x7f
 80017d0:	d904      	bls.n	80017dc <HAL_RCC_OscConfig+0x210>
 80017d2:	f240 11db 	movw	r1, #475	; 0x1db
 80017d6:	482f      	ldr	r0, [pc, #188]	; (8001894 <HAL_RCC_OscConfig+0x2c8>)
 80017d8:	f7ff f87f 	bl	80008da <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_RCC_OscConfig+0x236>
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	2b18      	cmp	r3, #24
 80017f6:	d15c      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2e6>
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d157      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_RCC_OscConfig+0x250>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f000 bc7e 	b.w	8002118 <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 0219 	bic.w	r2, r3, #25
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	491b      	ldr	r1, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182e:	f7ff fa61 	bl	8000cf4 <HAL_GetTick>
 8001832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001834:	e009      	b.n	800184a <HAL_RCC_OscConfig+0x27e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff fa5d 	bl	8000cf4 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d902      	bls.n	800184a <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	f000 bc67 	b.w	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ef      	beq.n	8001836 <HAL_RCC_OscConfig+0x26a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	f7ff fa7d 	bl	8000d54 <HAL_GetREVID>
 800185a:	4603      	mov	r3, r0
 800185c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001860:	4293      	cmp	r3, r2
 8001862:	d81b      	bhi.n	800189c <HAL_RCC_OscConfig+0x2d0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	d108      	bne.n	800187e <HAL_RCC_OscConfig+0x2b2>
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001874:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	e07d      	b.n	800197a <HAL_RCC_OscConfig+0x3ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	031b      	lsls	r3, r3, #12
 800188c:	4902      	ldr	r1, [pc, #8]	; (8001898 <HAL_RCC_OscConfig+0x2cc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001892:	e072      	b.n	800197a <HAL_RCC_OscConfig+0x3ae>
 8001894:	080045c8 	.word	0x080045c8
 8001898:	58024400 	.word	0x58024400
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b97      	ldr	r3, [pc, #604]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	4994      	ldr	r1, [pc, #592]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b0:	e063      	b.n	800197a <HAL_RCC_OscConfig+0x3ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d046      	beq.n	8001948 <HAL_RCC_OscConfig+0x37c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018ba:	4b90      	ldr	r3, [pc, #576]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0219 	bic.w	r2, r3, #25
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	498d      	ldr	r1, [pc, #564]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa12 	bl	8000cf4 <HAL_GetTick>
 80018d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018d2:	e009      	b.n	80018e8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff fa0e 	bl	8000cf4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d902      	bls.n	80018e8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f000 bc18 	b.w	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018e8:	4b84      	ldr	r3, [pc, #528]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ef      	beq.n	80018d4 <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	f7ff fa2e 	bl	8000d54 <HAL_GetREVID>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80018fe:	4293      	cmp	r3, r2
 8001900:	d817      	bhi.n	8001932 <HAL_RCC_OscConfig+0x366>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	2b40      	cmp	r3, #64	; 0x40
 8001908:	d108      	bne.n	800191c <HAL_RCC_OscConfig+0x350>
 800190a:	4b7c      	ldr	r3, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001912:	4a7a      	ldr	r2, [pc, #488]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	6053      	str	r3, [r2, #4]
 800191a:	e02e      	b.n	800197a <HAL_RCC_OscConfig+0x3ae>
 800191c:	4b77      	ldr	r3, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	031b      	lsls	r3, r3, #12
 800192a:	4974      	ldr	r1, [pc, #464]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e023      	b.n	800197a <HAL_RCC_OscConfig+0x3ae>
 8001932:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	061b      	lsls	r3, r3, #24
 8001940:	496e      	ldr	r1, [pc, #440]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
 8001946:	e018      	b.n	800197a <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001948:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6b      	ldr	r2, [pc, #428]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff f9ce 	bl	8000cf4 <HAL_GetTick>
 8001958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195c:	f7ff f9ca 	bl	8000cf4 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e3d4      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80c4 	beq.w	8001b10 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_RCC_OscConfig+0x3d6>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b80      	cmp	r3, #128	; 0x80
 8001996:	d004      	beq.n	80019a2 <HAL_RCC_OscConfig+0x3d6>
 8001998:	f240 212b 	movw	r1, #555	; 0x22b
 800199c:	4858      	ldr	r0, [pc, #352]	; (8001b00 <HAL_RCC_OscConfig+0x534>)
 800199e:	f7fe ff9c 	bl	80008da <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	2b3f      	cmp	r3, #63	; 0x3f
 80019a8:	d904      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3e8>
 80019aa:	f44f 710b 	mov.w	r1, #556	; 0x22c
 80019ae:	4854      	ldr	r0, [pc, #336]	; (8001b00 <HAL_RCC_OscConfig+0x534>)
 80019b0:	f7fe ff93 	bl	80008da <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b4:	4b51      	ldr	r3, [pc, #324]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019be:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d007      	beq.n	80019da <HAL_RCC_OscConfig+0x40e>
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b18      	cmp	r3, #24
 80019ce:	d13a      	bne.n	8001a46 <HAL_RCC_OscConfig+0x47a>
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d135      	bne.n	8001a46 <HAL_RCC_OscConfig+0x47a>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019da:	4b48      	ldr	r3, [pc, #288]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x426>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2b80      	cmp	r3, #128	; 0x80
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x426>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e392      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019f2:	f7ff f9af 	bl	8000d54 <HAL_GetREVID>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d817      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x464>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d108      	bne.n	8001a1a <HAL_RCC_OscConfig+0x44e>
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a10:	4a3a      	ldr	r2, [pc, #232]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a18:	e07a      	b.n	8001b10 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	069b      	lsls	r3, r3, #26
 8001a28:	4934      	ldr	r1, [pc, #208]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a2e:	e06f      	b.n	8001b10 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a30:	4b32      	ldr	r3, [pc, #200]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	492f      	ldr	r1, [pc, #188]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a44:	e064      	b.n	8001b10 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d042      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x508>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f94b 	bl	8000cf4 <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x4a8>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a62:	f7ff f947 	bl	8000cf4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e351      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a80:	f7ff f968 	bl	8000d54 <HAL_GetREVID>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d817      	bhi.n	8001abe <HAL_RCC_OscConfig+0x4f2>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d108      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001aa4:	6053      	str	r3, [r2, #4]
 8001aa6:	e033      	b.n	8001b10 <HAL_RCC_OscConfig+0x544>
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	069b      	lsls	r3, r3, #26
 8001ab6:	4911      	ldr	r1, [pc, #68]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e028      	b.n	8001b10 <HAL_RCC_OscConfig+0x544>
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	490b      	ldr	r1, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_RCC_OscConfig+0x530>)
 8001ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f908 	bl	8000cf4 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ae6:	e00d      	b.n	8001b04 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ae8:	f7ff f904 	bl	8000cf4 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d906      	bls.n	8001b04 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e30e      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
 8001afa:	bf00      	nop
 8001afc:	58024400 	.word	0x58024400
 8001b00:	080045c8 	.word	0x080045c8
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b04:	4b96      	ldr	r3, [pc, #600]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d043      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x5d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_OscConfig+0x56a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d004      	beq.n	8001b36 <HAL_RCC_OscConfig+0x56a>
 8001b2c:	f240 216d 	movw	r1, #621	; 0x26d
 8001b30:	488c      	ldr	r0, [pc, #560]	; (8001d64 <HAL_RCC_OscConfig+0x798>)
 8001b32:	f7fe fed2 	bl	80008da <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <HAL_RCC_OscConfig+0x5a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b88      	ldr	r3, [pc, #544]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b42:	4a87      	ldr	r2, [pc, #540]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f8d3 	bl	8000cf4 <HAL_GetTick>
 8001b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x598>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff f8cf 	bl	8000cf4 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e2d9      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b64:	4b7e      	ldr	r3, [pc, #504]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x586>
 8001b70:	e018      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b72:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f8b9 	bl	8000cf4 <HAL_GetTick>
 8001b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f8b5 	bl	8000cf4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e2bf      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b98:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x5ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d043      	beq.n	8001c38 <HAL_RCC_OscConfig+0x66c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_OscConfig+0x5fe>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d004      	beq.n	8001bca <HAL_RCC_OscConfig+0x5fe>
 8001bc0:	f44f 7126 	mov.w	r1, #664	; 0x298
 8001bc4:	4867      	ldr	r0, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x798>)
 8001bc6:	f7fe fe88 	bl	80008da <assert_failed>

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d019      	beq.n	8001c06 <HAL_RCC_OscConfig+0x63a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a62      	ldr	r2, [pc, #392]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bde:	f7ff f889 	bl	8000cf4 <HAL_GetTick>
 8001be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x62c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be6:	f7ff f885 	bl	8000cf4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e28f      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x61a>
 8001c04:	e018      	b.n	8001c38 <HAL_RCC_OscConfig+0x66c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c06:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a55      	ldr	r2, [pc, #340]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f86f 	bl	8000cf4 <HAL_GetTick>
 8001c16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x660>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1a:	f7ff f86b 	bl	8000cf4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e275      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8099 	beq.w	8001d78 <HAL_RCC_OscConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x69c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d008      	beq.n	8001c68 <HAL_RCC_OscConfig+0x69c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d004      	beq.n	8001c68 <HAL_RCC_OscConfig+0x69c>
 8001c5e:	f240 21c2 	movw	r1, #706	; 0x2c2
 8001c62:	4840      	ldr	r0, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x798>)
 8001c64:	f7fe fe39 	bl	80008da <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_OscConfig+0x79c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <HAL_RCC_OscConfig+0x79c>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c74:	f7ff f83e 	bl	8000cf4 <HAL_GetTick>
 8001c78:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x6c2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7c:	f7ff f83a 	bl	8000cf4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x6c2>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e244      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c8e:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <HAL_RCC_OscConfig+0x79c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x6b0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x6e4>
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a2e      	ldr	r2, [pc, #184]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	e02d      	b.n	8001d0c <HAL_RCC_OscConfig+0x740>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x706>
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x740>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x728>
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0x740>
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d015      	beq.n	8001d40 <HAL_RCC_OscConfig+0x774>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7fe ffee 	bl	8000cf4 <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x766>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7fe ffea 	bl	8000cf4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x766>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e1f2      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x794>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ee      	beq.n	8001d1c <HAL_RCC_OscConfig+0x750>
 8001d3e:	e01b      	b.n	8001d78 <HAL_RCC_OscConfig+0x7ac>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7fe ffd8 	bl	8000cf4 <HAL_GetTick>
 8001d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d46:	e011      	b.n	8001d6c <HAL_RCC_OscConfig+0x7a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7fe ffd4 	bl	8000cf4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d908      	bls.n	8001d6c <HAL_RCC_OscConfig+0x7a0>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1dc      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
 8001d5e:	bf00      	nop
 8001d60:	58024400 	.word	0x58024400
 8001d64:	080045c8 	.word	0x080045c8
 8001d68:	58024800 	.word	0x58024800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d6c:	4b97      	ldr	r3, [pc, #604]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e7      	bne.n	8001d48 <HAL_RCC_OscConfig+0x77c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x7ce>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_OscConfig+0x7ce>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d004      	beq.n	8001d9a <HAL_RCC_OscConfig+0x7ce>
 8001d90:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8001d94:	488e      	ldr	r0, [pc, #568]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001d96:	f7fe fda0 	bl	80008da <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 81b9 	beq.w	8002116 <HAL_RCC_OscConfig+0xb4a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001da4:	4b89      	ldr	r3, [pc, #548]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dac:	2b18      	cmp	r3, #24
 8001dae:	f000 813f 	beq.w	8002030 <HAL_RCC_OscConfig+0xa64>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	f040 8120 	bne.w	8001ffc <HAL_RCC_OscConfig+0xa30>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d010      	beq.n	8001de6 <HAL_RCC_OscConfig+0x81a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x81a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_OscConfig+0x81a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d004      	beq.n	8001de6 <HAL_RCC_OscConfig+0x81a>
 8001ddc:	f240 21fd 	movw	r1, #765	; 0x2fd
 8001de0:	487b      	ldr	r0, [pc, #492]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001de2:	f7fe fd7a 	bl	80008da <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d010      	beq.n	8001e10 <HAL_RCC_OscConfig+0x844>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x844>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCC_OscConfig+0x844>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d004      	beq.n	8001e10 <HAL_RCC_OscConfig+0x844>
 8001e06:	f240 21fe 	movw	r1, #766	; 0x2fe
 8001e0a:	4871      	ldr	r0, [pc, #452]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001e0c:	f7fe fd65 	bl	80008da <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_OscConfig+0x85e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d004      	beq.n	8001e2a <HAL_RCC_OscConfig+0x85e>
 8001e20:	f240 21ff 	movw	r1, #767	; 0x2ff
 8001e24:	486a      	ldr	r0, [pc, #424]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001e26:	f7fe fd58 	bl	80008da <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_OscConfig+0x86e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	2b3f      	cmp	r3, #63	; 0x3f
 8001e38:	d904      	bls.n	8001e44 <HAL_RCC_OscConfig+0x878>
 8001e3a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001e3e:	4864      	ldr	r0, [pc, #400]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001e40:	f7fe fd4b 	bl	80008da <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d904      	bls.n	8001e56 <HAL_RCC_OscConfig+0x88a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e54:	d904      	bls.n	8001e60 <HAL_RCC_OscConfig+0x894>
 8001e56:	f240 3101 	movw	r1, #769	; 0x301
 8001e5a:	485d      	ldr	r0, [pc, #372]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001e5c:	f7fe fd3d 	bl	80008da <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_RCC_OscConfig+0x8a4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	2b80      	cmp	r3, #128	; 0x80
 8001e6e:	d904      	bls.n	8001e7a <HAL_RCC_OscConfig+0x8ae>
 8001e70:	f240 3102 	movw	r1, #770	; 0x302
 8001e74:	4856      	ldr	r0, [pc, #344]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001e76:	f7fe fd30 	bl	80008da <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_OscConfig+0x8be>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d904      	bls.n	8001e94 <HAL_RCC_OscConfig+0x8c8>
 8001e8a:	f240 3103 	movw	r1, #771	; 0x303
 8001e8e:	4850      	ldr	r0, [pc, #320]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001e90:	f7fe fd23 	bl	80008da <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x8d8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d904      	bls.n	8001eae <HAL_RCC_OscConfig+0x8e2>
 8001ea4:	f44f 7141 	mov.w	r1, #772	; 0x304
 8001ea8:	4849      	ldr	r0, [pc, #292]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001eaa:	f7fe fd16 	bl	80008da <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb6:	d304      	bcc.n	8001ec2 <HAL_RCC_OscConfig+0x8f6>
 8001eb8:	f240 3105 	movw	r1, #773	; 0x305
 8001ebc:	4844      	ldr	r0, [pc, #272]	; (8001fd0 <HAL_RCC_OscConfig+0xa04>)
 8001ebe:	f7fe fd0c 	bl	80008da <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001ec8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7fe ff11 	bl	8000cf4 <HAL_GetTick>
 8001ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x91c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7fe ff0d 	bl	8000cf4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x91c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e117      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x90a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001ef6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0xa08>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	430a      	orrs	r2, r1
 8001f08:	4930      	ldr	r1, [pc, #192]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	628b      	str	r3, [r1, #40]	; 0x28
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	3b01      	subs	r3, #1
 8001f38:	061b      	lsls	r3, r3, #24
 8001f3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f3e:	4923      	ldr	r1, [pc, #140]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCC_OscConfig+0xa0c>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f5c:	00d2      	lsls	r2, r2, #3
 8001f5e:	491b      	ldr	r1, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	f023 020c 	bic.w	r2, r3, #12
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	4916      	ldr	r1, [pc, #88]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	f023 0202 	bic.w	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4912      	ldr	r1, [pc, #72]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <HAL_RCC_OscConfig+0xa00>)
 8001fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fe96 	bl	8000cf4 <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fca:	e010      	b.n	8001fee <HAL_RCC_OscConfig+0xa22>
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	080045c8 	.word	0x080045c8
 8001fd4:	fffffc0c 	.word	0xfffffc0c
 8001fd8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7fe fe8a 	bl	8000cf4 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xa22>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e094      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0xa10>
 8001ffa:	e08c      	b.n	8002116 <HAL_RCC_OscConfig+0xb4a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b48      	ldr	r3, [pc, #288]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a47      	ldr	r2, [pc, #284]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 8002002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe fe74 	bl	8000cf4 <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xa56>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe fe70 	bl	8000cf4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xa56>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e07a      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002022:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0xa44>
 800202e:	e072      	b.n	8002116 <HAL_RCC_OscConfig+0xb4a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002030:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2b01      	cmp	r3, #1
 8002042:	d031      	beq.n	80020a8 <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0203 	and.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d12a      	bne.n	80020a8 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d122      	bne.n	80020a8 <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d11a      	bne.n	80020a8 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0a5b      	lsrs	r3, r3, #9
 8002076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d111      	bne.n	80020a8 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	0c1b      	lsrs	r3, r3, #16
 8002088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d108      	bne.n	80020a8 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	0e1b      	lsrs	r3, r3, #24
 800209a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_OscConfig+0xae0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e035      	b.n	8002118 <HAL_RCC_OscConfig+0xb4c>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d029      	beq.n	8002116 <HAL_RCC_OscConfig+0xb4a>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ca:	d304      	bcc.n	80020d6 <HAL_RCC_OscConfig+0xb0a>
 80020cc:	f44f 715b 	mov.w	r1, #876	; 0x36c
 80020d0:	4814      	ldr	r0, [pc, #80]	; (8002124 <HAL_RCC_OscConfig+0xb58>)
 80020d2:	f7fe fc02 	bl	80008da <assert_failed>
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e2:	f7fe fe07 	bl	8000cf4 <HAL_GetTick>
 80020e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80020e8:	bf00      	nop
 80020ea:	f7fe fe03 	bl	8000cf4 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d0f9      	beq.n	80020ea <HAL_RCC_OscConfig+0xb1e>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 80020f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_OscConfig+0xb5c>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002102:	00d2      	lsls	r2, r2, #3
 8002104:	4906      	ldr	r1, [pc, #24]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 8002106:	4313      	orrs	r3, r2
 8002108:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_RCC_OscConfig+0xb54>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3730      	adds	r7, #48	; 0x30
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	58024400 	.word	0x58024400
 8002124:	080045c8 	.word	0x080045c8
 8002128:	ffff0007 	.word	0xffff0007

0800212c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e354      	b.n	80027ea <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_RCC_ClockConfig+0x24>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b3f      	cmp	r3, #63	; 0x3f
 800214e:	d904      	bls.n	800215a <HAL_RCC_ClockConfig+0x2e>
 8002150:	f240 31a7 	movw	r1, #935	; 0x3a7
 8002154:	4827      	ldr	r0, [pc, #156]	; (80021f4 <HAL_RCC_ClockConfig+0xc8>)
 8002156:	f7fe fbc0 	bl	80008da <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d031      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d02e      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d02b      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d028      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d025      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d022      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b06      	cmp	r3, #6
 8002182:	d01f      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b07      	cmp	r3, #7
 8002188:	d01c      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d019      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b09      	cmp	r3, #9
 8002194:	d016      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b0a      	cmp	r3, #10
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b0b      	cmp	r3, #11
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	d00d      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b0d      	cmp	r3, #13
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b0e      	cmp	r3, #14
 80021b2:	d007      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b0f      	cmp	r3, #15
 80021b8:	d004      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x98>
 80021ba:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80021be:	480d      	ldr	r0, [pc, #52]	; (80021f4 <HAL_RCC_ClockConfig+0xc8>)
 80021c0:	f7fe fb8b 	bl	80008da <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_RCC_ClockConfig+0xcc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d914      	bls.n	80021fc <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0xcc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 020f 	bic.w	r2, r3, #15
 80021da:	4907      	ldr	r1, [pc, #28]	; (80021f8 <HAL_RCC_ClockConfig+0xcc>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_ClockConfig+0xcc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e2fa      	b.n	80027ea <HAL_RCC_ClockConfig+0x6be>
 80021f4:	080045c8 	.word	0x080045c8
 80021f8:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d029      	beq.n	800225c <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	4b7e      	ldr	r3, [pc, #504]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002214:	429a      	cmp	r2, r3
 8002216:	d921      	bls.n	800225c <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d014      	beq.n	800224a <HAL_RCC_ClockConfig+0x11e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b40      	cmp	r3, #64	; 0x40
 8002226:	d010      	beq.n	800224a <HAL_RCC_ClockConfig+0x11e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b50      	cmp	r3, #80	; 0x50
 800222e:	d00c      	beq.n	800224a <HAL_RCC_ClockConfig+0x11e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b60      	cmp	r3, #96	; 0x60
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x11e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b70      	cmp	r3, #112	; 0x70
 800223e:	d004      	beq.n	800224a <HAL_RCC_ClockConfig+0x11e>
 8002240:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8002244:	4871      	ldr	r0, [pc, #452]	; (800240c <HAL_RCC_ClockConfig+0x2e0>)
 8002246:	f7fe fb48 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800224a:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	496c      	ldr	r1, [pc, #432]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d029      	beq.n	80022bc <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002274:	429a      	cmp	r2, r3
 8002276:	d921      	bls.n	80022bc <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d014      	beq.n	80022aa <HAL_RCC_ClockConfig+0x17e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	2b40      	cmp	r3, #64	; 0x40
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0x17e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	2b50      	cmp	r3, #80	; 0x50
 800228e:	d00c      	beq.n	80022aa <HAL_RCC_ClockConfig+0x17e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b60      	cmp	r3, #96	; 0x60
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x17e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	2b70      	cmp	r3, #112	; 0x70
 800229e:	d004      	beq.n	80022aa <HAL_RCC_ClockConfig+0x17e>
 80022a0:	f240 31d6 	movw	r1, #982	; 0x3d6
 80022a4:	4859      	ldr	r0, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x2e0>)
 80022a6:	f7fe fb18 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022aa:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4954      	ldr	r1, [pc, #336]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02d      	beq.n	8002324 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d925      	bls.n	8002324 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d018      	beq.n	8002312 <HAL_RCC_ClockConfig+0x1e6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e8:	d013      	beq.n	8002312 <HAL_RCC_ClockConfig+0x1e6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80022f2:	d00e      	beq.n	8002312 <HAL_RCC_ClockConfig+0x1e6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x1e6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002306:	d004      	beq.n	8002312 <HAL_RCC_ClockConfig+0x1e6>
 8002308:	f240 31e7 	movw	r1, #999	; 0x3e7
 800230c:	483f      	ldr	r0, [pc, #252]	; (800240c <HAL_RCC_ClockConfig+0x2e0>)
 800230e:	f7fe fae4 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	493a      	ldr	r1, [pc, #232]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d029      	beq.n	8002384 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800233c:	429a      	cmp	r2, r3
 800233e:	d921      	bls.n	8002384 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d014      	beq.n	8002372 <HAL_RCC_ClockConfig+0x246>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x246>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b50      	cmp	r3, #80	; 0x50
 8002356:	d00c      	beq.n	8002372 <HAL_RCC_ClockConfig+0x246>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b60      	cmp	r3, #96	; 0x60
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x246>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b70      	cmp	r3, #112	; 0x70
 8002366:	d004      	beq.n	8002372 <HAL_RCC_ClockConfig+0x246>
 8002368:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800236c:	4827      	ldr	r0, [pc, #156]	; (800240c <HAL_RCC_ClockConfig+0x2e0>)
 800236e:	f7fe fab4 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4922      	ldr	r1, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 8002380:	4313      	orrs	r3, r2
 8002382:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d03f      	beq.n	8002410 <HAL_RCC_ClockConfig+0x2e4>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	429a      	cmp	r2, r3
 800239e:	d937      	bls.n	8002410 <HAL_RCC_ClockConfig+0x2e4>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d024      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b09      	cmp	r3, #9
 80023b6:	d01c      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b0a      	cmp	r3, #10
 80023be:	d018      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b0b      	cmp	r3, #11
 80023c6:	d014      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d010      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b0d      	cmp	r3, #13
 80023d6:	d00c      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b0e      	cmp	r3, #14
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d004      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2c6>
 80023e8:	f240 410c 	movw	r1, #1036	; 0x40c
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <HAL_RCC_ClockConfig+0x2e0>)
 80023ee:	f7fe fa74 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f023 020f 	bic.w	r2, r3, #15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4902      	ldr	r1, [pc, #8]	; (8002408 <HAL_RCC_ClockConfig+0x2dc>)
 8002400:	4313      	orrs	r3, r2
 8002402:	618b      	str	r3, [r1, #24]
 8002404:	e004      	b.n	8002410 <HAL_RCC_ClockConfig+0x2e4>
 8002406:	bf00      	nop
 8002408:	58024400 	.word	0x58024400
 800240c:	080045c8 	.word	0x080045c8
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 809c 	beq.w	8002556 <HAL_RCC_ClockConfig+0x42a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d02c      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242e:	d027      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002438:	d022      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002442:	d01d      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800244c:	d018      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002456:	d013      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8002460:	d00e      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800246a:	d009      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002474:	d004      	beq.n	8002480 <HAL_RCC_ClockConfig+0x354>
 8002476:	f240 411c 	movw	r1, #1052	; 0x41c
 800247a:	4863      	ldr	r0, [pc, #396]	; (8002608 <HAL_RCC_ClockConfig+0x4dc>)
 800247c:	f7fe fa2d 	bl	80008da <assert_failed>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d010      	beq.n	80024aa <HAL_RCC_ClockConfig+0x37e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00c      	beq.n	80024aa <HAL_RCC_ClockConfig+0x37e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x37e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d004      	beq.n	80024aa <HAL_RCC_ClockConfig+0x37e>
 80024a0:	f240 411d 	movw	r1, #1053	; 0x41d
 80024a4:	4858      	ldr	r0, [pc, #352]	; (8002608 <HAL_RCC_ClockConfig+0x4dc>)
 80024a6:	f7fe fa18 	bl	80008da <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024aa:	4b58      	ldr	r3, [pc, #352]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4955      	ldr	r1, [pc, #340]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x3a8>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024c4:	4b51      	ldr	r3, [pc, #324]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d121      	bne.n	8002514 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e18a      	b.n	80027ea <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d107      	bne.n	80024ec <HAL_RCC_ClockConfig+0x3c0>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d115      	bne.n	8002514 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e17e      	b.n	80027ea <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_ClockConfig+0x3d8>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024f4:	4b45      	ldr	r3, [pc, #276]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e172      	b.n	80027ea <HAL_RCC_ClockConfig+0x6be>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002504:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e16a      	b.n	80027ea <HAL_RCC_ClockConfig+0x6be>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f023 0207 	bic.w	r2, r3, #7
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	493a      	ldr	r1, [pc, #232]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 8002522:	4313      	orrs	r3, r2
 8002524:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002526:	f7fe fbe5 	bl	8000cf4 <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252c:	e00a      	b.n	8002544 <HAL_RCC_ClockConfig+0x418>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252e:	f7fe fbe1 	bl	8000cf4 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_ClockConfig+0x418>
      {
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e152      	b.n	80027ea <HAL_RCC_ClockConfig+0x6be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002544:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	429a      	cmp	r2, r3
 8002554:	d1eb      	bne.n	800252e <HAL_RCC_ClockConfig+0x402>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d039      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	429a      	cmp	r2, r3
 8002570:	d231      	bcs.n	80025d6 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d024      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d020      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b09      	cmp	r3, #9
 8002588:	d01c      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b0a      	cmp	r3, #10
 8002590:	d018      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b0b      	cmp	r3, #11
 8002598:	d014      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d010      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b0d      	cmp	r3, #13
 80025a8:	d00c      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b0e      	cmp	r3, #14
 80025b0:	d008      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	d004      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x498>
 80025ba:	f240 415e 	movw	r1, #1118	; 0x45e
 80025be:	4812      	ldr	r0, [pc, #72]	; (8002608 <HAL_RCC_ClockConfig+0x4dc>)
 80025c0:	f7fe f98b 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f023 020f 	bic.w	r2, r3, #15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_RCC_ClockConfig+0x4e0>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_RCC_ClockConfig+0x4e4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d217      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x4e4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 020f 	bic.w	r2, r3, #15
 80025ec:	4908      	ldr	r1, [pc, #32]	; (8002610 <HAL_RCC_ClockConfig+0x4e4>)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_ClockConfig+0x4e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d008      	beq.n	8002614 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0f1      	b.n	80027ea <HAL_RCC_ClockConfig+0x6be>
 8002606:	bf00      	nop
 8002608:	080045c8 	.word	0x080045c8
 800260c:	58024400 	.word	0x58024400
 8002610:	52002000 	.word	0x52002000
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d029      	beq.n	8002674 <HAL_RCC_ClockConfig+0x548>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800262c:	429a      	cmp	r2, r3
 800262e:	d221      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x548>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d014      	beq.n	8002662 <HAL_RCC_ClockConfig+0x536>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d010      	beq.n	8002662 <HAL_RCC_ClockConfig+0x536>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b50      	cmp	r3, #80	; 0x50
 8002646:	d00c      	beq.n	8002662 <HAL_RCC_ClockConfig+0x536>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b60      	cmp	r3, #96	; 0x60
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x536>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d004      	beq.n	8002662 <HAL_RCC_ClockConfig+0x536>
 8002658:	f240 417f 	movw	r1, #1151	; 0x47f
 800265c:	4866      	ldr	r0, [pc, #408]	; (80027f8 <HAL_RCC_ClockConfig+0x6cc>)
 800265e:	f7fe f93c 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002662:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4961      	ldr	r1, [pc, #388]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d029      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x5a8>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	4b5b      	ldr	r3, [pc, #364]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800268c:	429a      	cmp	r2, r3
 800268e:	d221      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x5a8>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d014      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x596>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d010      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x596>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	2b50      	cmp	r3, #80	; 0x50
 80026a6:	d00c      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x596>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	2b60      	cmp	r3, #96	; 0x60
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x596>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d004      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x596>
 80026b8:	f240 4191 	movw	r1, #1169	; 0x491
 80026bc:	484e      	ldr	r0, [pc, #312]	; (80027f8 <HAL_RCC_ClockConfig+0x6cc>)
 80026be:	f7fe f90c 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026c2:	4b4c      	ldr	r3, [pc, #304]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4949      	ldr	r1, [pc, #292]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02d      	beq.n	800273c <HAL_RCC_ClockConfig+0x610>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d225      	bcs.n	800273c <HAL_RCC_ClockConfig+0x610>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d018      	beq.n	800272a <HAL_RCC_ClockConfig+0x5fe>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002700:	d013      	beq.n	800272a <HAL_RCC_ClockConfig+0x5fe>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800270a:	d00e      	beq.n	800272a <HAL_RCC_ClockConfig+0x5fe>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x5fe>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800271e:	d004      	beq.n	800272a <HAL_RCC_ClockConfig+0x5fe>
 8002720:	f240 41a3 	movw	r1, #1187	; 0x4a3
 8002724:	4834      	ldr	r0, [pc, #208]	; (80027f8 <HAL_RCC_ClockConfig+0x6cc>)
 8002726:	f7fe f8d8 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800272a:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	492f      	ldr	r1, [pc, #188]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 8002738:	4313      	orrs	r3, r2
 800273a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d029      	beq.n	800279c <HAL_RCC_ClockConfig+0x670>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002754:	429a      	cmp	r2, r3
 8002756:	d221      	bcs.n	800279c <HAL_RCC_ClockConfig+0x670>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d014      	beq.n	800278a <HAL_RCC_ClockConfig+0x65e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d010      	beq.n	800278a <HAL_RCC_ClockConfig+0x65e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2b50      	cmp	r3, #80	; 0x50
 800276e:	d00c      	beq.n	800278a <HAL_RCC_ClockConfig+0x65e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	2b60      	cmp	r3, #96	; 0x60
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x65e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b70      	cmp	r3, #112	; 0x70
 800277e:	d004      	beq.n	800278a <HAL_RCC_ClockConfig+0x65e>
 8002780:	f240 41b5 	movw	r1, #1205	; 0x4b5
 8002784:	481c      	ldr	r0, [pc, #112]	; (80027f8 <HAL_RCC_ClockConfig+0x6cc>)
 8002786:	f7fe f8a8 	bl	80008da <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4917      	ldr	r1, [pc, #92]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800279c:	f000 f836 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	4913      	ldr	r1, [pc, #76]	; (80027fc <HAL_RCC_ClockConfig+0x6d0>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_RCC_ClockConfig+0x6c8>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x6d0>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_RCC_ClockConfig+0x6d4>)
 80027d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d4:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x6d8>)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_ClockConfig+0x6dc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fa3e 	bl	8000c60 <HAL_InitTick>
 80027e4:	4603      	mov	r3, r0
 80027e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	58024400 	.word	0x58024400
 80027f8:	080045c8 	.word	0x080045c8
 80027fc:	08004674 	.word	0x08004674
 8002800:	24000004 	.word	0x24000004
 8002804:	24000000 	.word	0x24000000
 8002808:	24000008 	.word	0x24000008

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002812:	4bb3      	ldr	r3, [pc, #716]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800281a:	2b18      	cmp	r3, #24
 800281c:	f200 8155 	bhi.w	8002aca <HAL_RCC_GetSysClockFreq+0x2be>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	0800288d 	.word	0x0800288d
 800282c:	08002acb 	.word	0x08002acb
 8002830:	08002acb 	.word	0x08002acb
 8002834:	08002acb 	.word	0x08002acb
 8002838:	08002acb 	.word	0x08002acb
 800283c:	08002acb 	.word	0x08002acb
 8002840:	08002acb 	.word	0x08002acb
 8002844:	08002acb 	.word	0x08002acb
 8002848:	080028b3 	.word	0x080028b3
 800284c:	08002acb 	.word	0x08002acb
 8002850:	08002acb 	.word	0x08002acb
 8002854:	08002acb 	.word	0x08002acb
 8002858:	08002acb 	.word	0x08002acb
 800285c:	08002acb 	.word	0x08002acb
 8002860:	08002acb 	.word	0x08002acb
 8002864:	08002acb 	.word	0x08002acb
 8002868:	080028b9 	.word	0x080028b9
 800286c:	08002acb 	.word	0x08002acb
 8002870:	08002acb 	.word	0x08002acb
 8002874:	08002acb 	.word	0x08002acb
 8002878:	08002acb 	.word	0x08002acb
 800287c:	08002acb 	.word	0x08002acb
 8002880:	08002acb 	.word	0x08002acb
 8002884:	08002acb 	.word	0x08002acb
 8002888:	080028bf 	.word	0x080028bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800288c:	4b94      	ldr	r3, [pc, #592]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002898:	4b91      	ldr	r3, [pc, #580]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	4a90      	ldr	r2, [pc, #576]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80028aa:	e111      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028ac:	4b8d      	ldr	r3, [pc, #564]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028ae:	61bb      	str	r3, [r7, #24]
      break;
 80028b0:	e10e      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80028b2:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028b4:	61bb      	str	r3, [r7, #24]
      break;
 80028b6:	e10b      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80028b8:	4b8c      	ldr	r3, [pc, #560]	; (8002aec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028ba:	61bb      	str	r3, [r7, #24]
      break;
 80028bc:	e108      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028be:	4b88      	ldr	r3, [pc, #544]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028c8:	4b85      	ldr	r3, [pc, #532]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028d4:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028de:	4b80      	ldr	r3, [pc, #512]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	08db      	lsrs	r3, r3, #3
 80028e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80e1 	beq.w	8002ac4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b02      	cmp	r3, #2
 8002906:	f000 8083 	beq.w	8002a10 <HAL_RCC_GetSysClockFreq+0x204>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b02      	cmp	r3, #2
 800290e:	f200 80a1 	bhi.w	8002a54 <HAL_RCC_GetSysClockFreq+0x248>
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x114>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d056      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800291e:	e099      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002920:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02d      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800292c:	4b6c      	ldr	r3, [pc, #432]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	08db      	lsrs	r3, r3, #3
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	4a6b      	ldr	r2, [pc, #428]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002956:	4b62      	ldr	r3, [pc, #392]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002966:	ed97 6a02 	vldr	s12, [r7, #8]
 800296a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800296e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800297a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002986:	e087      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002992:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002af4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800299a:	4b51      	ldr	r3, [pc, #324]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ca:	e065      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002af8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029de:	4b40      	ldr	r3, [pc, #256]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80029f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a0e:	e043      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002afc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a22:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a36:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a52:	e021      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002af8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a7a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002af0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	0a5b      	lsrs	r3, r3, #9
 8002a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abc:	ee17 3a90 	vmov	r3, s15
 8002ac0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ac2:	e005      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
      break;
 8002ac8:	e002      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002acc:	61bb      	str	r3, [r7, #24]
      break;
 8002ace:	bf00      	nop
  }

  return sysclockfreq;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	; 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	58024400 	.word	0x58024400
 8002ae4:	03d09000 	.word	0x03d09000
 8002ae8:	003d0900 	.word	0x003d0900
 8002aec:	017d7840 	.word	0x017d7840
 8002af0:	46000000 	.word	0x46000000
 8002af4:	4c742400 	.word	0x4c742400
 8002af8:	4a742400 	.word	0x4a742400
 8002afc:	4bbebc20 	.word	0x4bbebc20

08002b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0f5      	b.n	8002cfe <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_TIM_PWM_Init+0x208>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d045      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d040      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a78      	ldr	r2, [pc, #480]	; (8002d0c <HAL_TIM_PWM_Init+0x20c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d03b      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a76      	ldr	r2, [pc, #472]	; (8002d10 <HAL_TIM_PWM_Init+0x210>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d036      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a75      	ldr	r2, [pc, #468]	; (8002d14 <HAL_TIM_PWM_Init+0x214>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d031      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a73      	ldr	r2, [pc, #460]	; (8002d18 <HAL_TIM_PWM_Init+0x218>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02c      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a72      	ldr	r2, [pc, #456]	; (8002d1c <HAL_TIM_PWM_Init+0x21c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d027      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a70      	ldr	r2, [pc, #448]	; (8002d20 <HAL_TIM_PWM_Init+0x220>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d022      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6f      	ldr	r2, [pc, #444]	; (8002d24 <HAL_TIM_PWM_Init+0x224>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d01d      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6d      	ldr	r2, [pc, #436]	; (8002d28 <HAL_TIM_PWM_Init+0x228>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d018      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6c      	ldr	r2, [pc, #432]	; (8002d2c <HAL_TIM_PWM_Init+0x22c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6a      	ldr	r2, [pc, #424]	; (8002d30 <HAL_TIM_PWM_Init+0x230>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <HAL_TIM_PWM_Init+0x234>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <HAL_TIM_PWM_Init+0x238>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_PWM_Init+0xa8>
 8002b9e:	f240 5133 	movw	r1, #1331	; 0x533
 8002ba2:	4866      	ldr	r0, [pc, #408]	; (8002d3c <HAL_TIM_PWM_Init+0x23c>)
 8002ba4:	f7fd fe99 	bl	80008da <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d014      	beq.n	8002bda <HAL_TIM_PWM_Init+0xda>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d010      	beq.n	8002bda <HAL_TIM_PWM_Init+0xda>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d00c      	beq.n	8002bda <HAL_TIM_PWM_Init+0xda>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d008      	beq.n	8002bda <HAL_TIM_PWM_Init+0xda>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d004      	beq.n	8002bda <HAL_TIM_PWM_Init+0xda>
 8002bd0:	f240 5134 	movw	r1, #1332	; 0x534
 8002bd4:	4859      	ldr	r0, [pc, #356]	; (8002d3c <HAL_TIM_PWM_Init+0x23c>)
 8002bd6:	f7fd fe80 	bl	80008da <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00e      	beq.n	8002c00 <HAL_TIM_PWM_Init+0x100>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bea:	d009      	beq.n	8002c00 <HAL_TIM_PWM_Init+0x100>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf4:	d004      	beq.n	8002c00 <HAL_TIM_PWM_Init+0x100>
 8002bf6:	f240 5135 	movw	r1, #1333	; 0x535
 8002bfa:	4850      	ldr	r0, [pc, #320]	; (8002d3c <HAL_TIM_PWM_Init+0x23c>)
 8002bfc:	f7fd fe6d 	bl	80008da <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_PWM_Init+0x114>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <HAL_TIM_PWM_Init+0x214>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d107      	bne.n	8002c24 <HAL_TIM_PWM_Init+0x124>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e00e      	b.n	8002c42 <HAL_TIM_PWM_Init+0x142>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <HAL_TIM_PWM_Init+0x13a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d201      	bcs.n	8002c3a <HAL_TIM_PWM_Init+0x13a>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_TIM_PWM_Init+0x13c>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d104      	bne.n	8002c50 <HAL_TIM_PWM_Init+0x150>
 8002c46:	f240 5136 	movw	r1, #1334	; 0x536
 8002c4a:	483c      	ldr	r0, [pc, #240]	; (8002d3c <HAL_TIM_PWM_Init+0x23c>)
 8002c4c:	f7fd fe45 	bl	80008da <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_TIM_PWM_Init+0x16a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIM_PWM_Init+0x16a>
 8002c60:	f240 5137 	movw	r1, #1335	; 0x537
 8002c64:	4835      	ldr	r0, [pc, #212]	; (8002d3c <HAL_TIM_PWM_Init+0x23c>)
 8002c66:	f7fd fe38 	bl	80008da <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd fe50 	bl	8000924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f000 fce2 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40000800 	.word	0x40000800
 8002d14:	40000c00 	.word	0x40000c00
 8002d18:	40001000 	.word	0x40001000
 8002d1c:	40001400 	.word	0x40001400
 8002d20:	40010400 	.word	0x40010400
 8002d24:	40001800 	.word	0x40001800
 8002d28:	40001c00 	.word	0x40001c00
 8002d2c:	40002000 	.word	0x40002000
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	08004600 	.word	0x08004600

08002d40 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a89      	ldr	r2, [pc, #548]	; (8002f78 <HAL_TIM_PWM_Start_IT+0x238>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d117      	bne.n	8002d88 <HAL_TIM_PWM_Start_IT+0x48>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80ae 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	f000 80aa 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	f000 80a6 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	f000 80a2 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	f000 809e 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b14      	cmp	r3, #20
 8002d84:	f000 809a 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d10f      	bne.n	8002db2 <HAL_TIM_PWM_Start_IT+0x72>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8091 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	f000 808d 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	f000 8089 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	f000 8085 	beq.w	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a71      	ldr	r2, [pc, #452]	; (8002f7c <HAL_TIM_PWM_Start_IT+0x23c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d10b      	bne.n	8002dd4 <HAL_TIM_PWM_Start_IT+0x94>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d07c      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d079      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d076      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d073      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a69      	ldr	r2, [pc, #420]	; (8002f80 <HAL_TIM_PWM_Start_IT+0x240>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10b      	bne.n	8002df6 <HAL_TIM_PWM_Start_IT+0xb6>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d06b      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d068      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d065      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d062      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a62      	ldr	r2, [pc, #392]	; (8002f84 <HAL_TIM_PWM_Start_IT+0x244>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10b      	bne.n	8002e18 <HAL_TIM_PWM_Start_IT+0xd8>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d05a      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d057      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d054      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	d051      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5a      	ldr	r2, [pc, #360]	; (8002f88 <HAL_TIM_PWM_Start_IT+0x248>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d111      	bne.n	8002e46 <HAL_TIM_PWM_Start_IT+0x106>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d049      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d046      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d043      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d040      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d03d      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b14      	cmp	r3, #20
 8002e44:	d03a      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a50      	ldr	r2, [pc, #320]	; (8002f8c <HAL_TIM_PWM_Start_IT+0x24c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d105      	bne.n	8002e5c <HAL_TIM_PWM_Start_IT+0x11c>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d032      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d02f      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4b      	ldr	r2, [pc, #300]	; (8002f90 <HAL_TIM_PWM_Start_IT+0x250>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d102      	bne.n	8002e6c <HAL_TIM_PWM_Start_IT+0x12c>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d027      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a48      	ldr	r2, [pc, #288]	; (8002f94 <HAL_TIM_PWM_Start_IT+0x254>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d102      	bne.n	8002e7c <HAL_TIM_PWM_Start_IT+0x13c>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01f      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <HAL_TIM_PWM_Start_IT+0x258>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d105      	bne.n	8002e92 <HAL_TIM_PWM_Start_IT+0x152>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d017      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d014      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a41      	ldr	r2, [pc, #260]	; (8002f9c <HAL_TIM_PWM_Start_IT+0x25c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_TIM_PWM_Start_IT+0x162>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00c      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3e      	ldr	r2, [pc, #248]	; (8002fa0 <HAL_TIM_PWM_Start_IT+0x260>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d102      	bne.n	8002eb2 <HAL_TIM_PWM_Start_IT+0x172>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_TIM_PWM_Start_IT+0x17c>
 8002eb2:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8002eb6:	483b      	ldr	r0, [pc, #236]	; (8002fa4 <HAL_TIM_PWM_Start_IT+0x264>)
 8002eb8:	f7fd fd0f 	bl	80008da <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_TIM_PWM_Start_IT+0x196>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e03c      	b.n	8002f50 <HAL_TIM_PWM_Start_IT+0x210>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d109      	bne.n	8002ef0 <HAL_TIM_PWM_Start_IT+0x1b0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e02f      	b.n	8002f50 <HAL_TIM_PWM_Start_IT+0x210>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d109      	bne.n	8002f0a <HAL_TIM_PWM_Start_IT+0x1ca>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e022      	b.n	8002f50 <HAL_TIM_PWM_Start_IT+0x210>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	d109      	bne.n	8002f24 <HAL_TIM_PWM_Start_IT+0x1e4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e015      	b.n	8002f50 <HAL_TIM_PWM_Start_IT+0x210>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d109      	bne.n	8002f3e <HAL_TIM_PWM_Start_IT+0x1fe>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	e008      	b.n	8002f50 <HAL_TIM_PWM_Start_IT+0x210>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_TIM_PWM_Start_IT+0x218>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e103      	b.n	8003160 <HAL_TIM_PWM_Start_IT+0x420>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d104      	bne.n	8002f68 <HAL_TIM_PWM_Start_IT+0x228>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f66:	e03b      	b.n	8002fe0 <HAL_TIM_PWM_Start_IT+0x2a0>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_TIM_PWM_Start_IT+0x268>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f76:	e033      	b.n	8002fe0 <HAL_TIM_PWM_Start_IT+0x2a0>
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800
 8002f84:	40000c00 	.word	0x40000c00
 8002f88:	40010400 	.word	0x40010400
 8002f8c:	40001800 	.word	0x40001800
 8002f90:	40001c00 	.word	0x40001c00
 8002f94:	40002000 	.word	0x40002000
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	40014400 	.word	0x40014400
 8002fa0:	40014800 	.word	0x40014800
 8002fa4:	08004600 	.word	0x08004600
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d104      	bne.n	8002fb8 <HAL_TIM_PWM_Start_IT+0x278>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb6:	e013      	b.n	8002fe0 <HAL_TIM_PWM_Start_IT+0x2a0>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d104      	bne.n	8002fc8 <HAL_TIM_PWM_Start_IT+0x288>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc6:	e00b      	b.n	8002fe0 <HAL_TIM_PWM_Start_IT+0x2a0>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d104      	bne.n	8002fd8 <HAL_TIM_PWM_Start_IT+0x298>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd6:	e003      	b.n	8002fe0 <HAL_TIM_PWM_Start_IT+0x2a0>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d840      	bhi.n	8003068 <HAL_TIM_PWM_Start_IT+0x328>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <HAL_TIM_PWM_Start_IT+0x2ac>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08003021 	.word	0x08003021
 8002ff0:	08003069 	.word	0x08003069
 8002ff4:	08003069 	.word	0x08003069
 8002ff8:	08003069 	.word	0x08003069
 8002ffc:	08003033 	.word	0x08003033
 8003000:	08003069 	.word	0x08003069
 8003004:	08003069 	.word	0x08003069
 8003008:	08003069 	.word	0x08003069
 800300c:	08003045 	.word	0x08003045
 8003010:	08003069 	.word	0x08003069
 8003014:	08003069 	.word	0x08003069
 8003018:	08003069 	.word	0x08003069
 800301c:	08003057 	.word	0x08003057
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0202 	orr.w	r2, r2, #2
 800302e:	60da      	str	r2, [r3, #12]
      break;
 8003030:	e01d      	b.n	800306e <HAL_TIM_PWM_Start_IT+0x32e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0204 	orr.w	r2, r2, #4
 8003040:	60da      	str	r2, [r3, #12]
      break;
 8003042:	e014      	b.n	800306e <HAL_TIM_PWM_Start_IT+0x32e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0208 	orr.w	r2, r2, #8
 8003052:	60da      	str	r2, [r3, #12]
      break;
 8003054:	e00b      	b.n	800306e <HAL_TIM_PWM_Start_IT+0x32e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0210 	orr.w	r2, r2, #16
 8003064:	60da      	str	r2, [r3, #12]
      break;
 8003066:	e002      	b.n	800306e <HAL_TIM_PWM_Start_IT+0x32e>
    }

    default:
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      break;
 800306c:	bf00      	nop
  }

  if (status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d174      	bne.n	800315e <HAL_TIM_PWM_Start_IT+0x41e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	6839      	ldr	r1, [r7, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fee9 	bl	8003e54 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a38      	ldr	r2, [pc, #224]	; (8003168 <HAL_TIM_PWM_Start_IT+0x428>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d013      	beq.n	80030b4 <HAL_TIM_PWM_Start_IT+0x374>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a36      	ldr	r2, [pc, #216]	; (800316c <HAL_TIM_PWM_Start_IT+0x42c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00e      	beq.n	80030b4 <HAL_TIM_PWM_Start_IT+0x374>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a35      	ldr	r2, [pc, #212]	; (8003170 <HAL_TIM_PWM_Start_IT+0x430>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_TIM_PWM_Start_IT+0x374>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a33      	ldr	r2, [pc, #204]	; (8003174 <HAL_TIM_PWM_Start_IT+0x434>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_PWM_Start_IT+0x374>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a32      	ldr	r2, [pc, #200]	; (8003178 <HAL_TIM_PWM_Start_IT+0x438>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_PWM_Start_IT+0x378>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_TIM_PWM_Start_IT+0x37a>
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_TIM_PWM_Start_IT+0x38e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a25      	ldr	r2, [pc, #148]	; (8003168 <HAL_TIM_PWM_Start_IT+0x428>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_TIM_PWM_Start_IT+0x3de>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e0:	d01d      	beq.n	800311e <HAL_TIM_PWM_Start_IT+0x3de>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a25      	ldr	r2, [pc, #148]	; (800317c <HAL_TIM_PWM_Start_IT+0x43c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_TIM_PWM_Start_IT+0x3de>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a23      	ldr	r2, [pc, #140]	; (8003180 <HAL_TIM_PWM_Start_IT+0x440>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_TIM_PWM_Start_IT+0x3de>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a22      	ldr	r2, [pc, #136]	; (8003184 <HAL_TIM_PWM_Start_IT+0x444>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_TIM_PWM_Start_IT+0x3de>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_TIM_PWM_Start_IT+0x42c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_TIM_PWM_Start_IT+0x3de>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <HAL_TIM_PWM_Start_IT+0x448>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_TIM_PWM_Start_IT+0x3de>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <HAL_TIM_PWM_Start_IT+0x430>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d115      	bne.n	800314a <HAL_TIM_PWM_Start_IT+0x40a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_TIM_PWM_Start_IT+0x44c>)
 8003126:	4013      	ands	r3, r2
 8003128:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d015      	beq.n	800315c <HAL_TIM_PWM_Start_IT+0x41c>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003136:	d011      	beq.n	800315c <HAL_TIM_PWM_Start_IT+0x41c>
      {
        __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003148:	e008      	b.n	800315c <HAL_TIM_PWM_Start_IT+0x41c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e000      	b.n	800315e <HAL_TIM_PWM_Start_IT+0x41e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40010000 	.word	0x40010000
 800316c:	40010400 	.word	0x40010400
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	40001800 	.word	0x40001800
 800318c:	00010007 	.word	0x00010007

08003190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d013      	beq.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d010      	beq.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	d00d      	beq.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d00a      	beq.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b14      	cmp	r3, #20
 80031c2:	d007      	beq.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b3c      	cmp	r3, #60	; 0x3c
 80031c8:	d004      	beq.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80031ca:	f241 01af 	movw	r1, #4271	; 0x10af
 80031ce:	4895      	ldr	r0, [pc, #596]	; (8003424 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80031d0:	f7fd fb83 	bl	80008da <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b60      	cmp	r3, #96	; 0x60
 80031da:	d01c      	beq.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x86>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b70      	cmp	r3, #112	; 0x70
 80031e2:	d018      	beq.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x86>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a8f      	ldr	r2, [pc, #572]	; (8003428 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x86>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a8e      	ldr	r2, [pc, #568]	; (800342c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x86>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a8c      	ldr	r2, [pc, #560]	; (8003430 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x86>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a8b      	ldr	r2, [pc, #556]	; (8003434 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x86>
 800320c:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8003210:	4884      	ldr	r0, [pc, #528]	; (8003424 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8003212:	f7fd fb62 	bl	80008da <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8003226:	f241 01b1 	movw	r1, #4273	; 0x10b1
 800322a:	487e      	ldr	r0, [pc, #504]	; (8003424 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800322c:	f7fd fb55 	bl	80008da <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_TIM_PWM_ConfigChannel+0xba>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d004      	beq.n	800324a <HAL_TIM_PWM_ConfigChannel+0xba>
 8003240:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8003244:	4877      	ldr	r0, [pc, #476]	; (8003424 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8003246:	f7fd fb48 	bl	80008da <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8003254:	2302      	movs	r3, #2
 8003256:	e1f3      	b.n	8003640 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b14      	cmp	r3, #20
 8003264:	f200 81e4 	bhi.w	8003630 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8003268:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	080032c5 	.word	0x080032c5
 8003274:	08003631 	.word	0x08003631
 8003278:	08003631 	.word	0x08003631
 800327c:	08003631 	.word	0x08003631
 8003280:	08003387 	.word	0x08003387
 8003284:	08003631 	.word	0x08003631
 8003288:	08003631 	.word	0x08003631
 800328c:	08003631 	.word	0x08003631
 8003290:	08003465 	.word	0x08003465
 8003294:	08003631 	.word	0x08003631
 8003298:	08003631 	.word	0x08003631
 800329c:	08003631 	.word	0x08003631
 80032a0:	080034eb 	.word	0x080034eb
 80032a4:	08003631 	.word	0x08003631
 80032a8:	08003631 	.word	0x08003631
 80032ac:	08003631 	.word	0x08003631
 80032b0:	08003573 	.word	0x08003573
 80032b4:	08003631 	.word	0x08003631
 80032b8:	08003631 	.word	0x08003631
 80032bc:	08003631 	.word	0x08003631
 80032c0:	080035d1 	.word	0x080035d1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d03b      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d036      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a57      	ldr	r2, [pc, #348]	; (800343c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a56      	ldr	r2, [pc, #344]	; (8003440 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d02c      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a54      	ldr	r2, [pc, #336]	; (8003444 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d027      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a53      	ldr	r2, [pc, #332]	; (8003448 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a51      	ldr	r2, [pc, #324]	; (800344c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a50      	ldr	r2, [pc, #320]	; (8003450 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a4e      	ldr	r2, [pc, #312]	; (8003454 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a4d      	ldr	r2, [pc, #308]	; (8003458 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a4b      	ldr	r2, [pc, #300]	; (800345c <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800333c:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8003340:	4838      	ldr	r0, [pc, #224]	; (8003424 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8003342:	f7fd faca 	bl	80008da <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fa21 	bl	8003794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0208 	orr.w	r2, r2, #8
 8003360:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699a      	ldr	r2, [r3, #24]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0204 	bic.w	r2, r2, #4
 8003370:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6999      	ldr	r1, [r3, #24]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	619a      	str	r2, [r3, #24]
      break;
 8003384:	e157      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d027      	beq.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d022      	beq.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x250>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a27      	ldr	r2, [pc, #156]	; (800343c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a25      	ldr	r2, [pc, #148]	; (8003440 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d018      	beq.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a24      	ldr	r2, [pc, #144]	; (8003444 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a21      	ldr	r2, [pc, #132]	; (8003458 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x250>
 80033d6:	f241 01cd 	movw	r1, #4301	; 0x10cd
 80033da:	4812      	ldr	r0, [pc, #72]	; (8003424 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80033dc:	f7fd fa7d 	bl	80008da <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa8e 	bl	8003908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      break;
 8003420:	e109      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8003422:	bf00      	nop
 8003424:	08004600 	.word	0x08004600
 8003428:	00010040 	.word	0x00010040
 800342c:	00010050 	.word	0x00010050
 8003430:	00010060 	.word	0x00010060
 8003434:	00010070 	.word	0x00010070
 8003438:	40010000 	.word	0x40010000
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40010400 	.word	0x40010400
 800344c:	40001800 	.word	0x40001800
 8003450:	40001c00 	.word	0x40001c00
 8003454:	40002000 	.word	0x40002000
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a77      	ldr	r2, [pc, #476]	; (8003648 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01d      	beq.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x31a>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d018      	beq.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a73      	ldr	r2, [pc, #460]	; (800364c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a72      	ldr	r2, [pc, #456]	; (8003650 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x31a>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a70      	ldr	r2, [pc, #448]	; (8003654 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6f      	ldr	r2, [pc, #444]	; (8003658 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x31a>
 80034a0:	f241 01de 	movw	r1, #4318	; 0x10de
 80034a4:	486d      	ldr	r0, [pc, #436]	; (800365c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80034a6:	f7fd fa18 	bl	80008da <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fadb 	bl	8003a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0208 	orr.w	r2, r2, #8
 80034c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0204 	bic.w	r2, r2, #4
 80034d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
      break;
 80034e8:	e0a5      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a56      	ldr	r2, [pc, #344]	; (8003648 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d01d      	beq.n	8003530 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d018      	beq.n	8003530 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a50      	ldr	r2, [pc, #320]	; (8003650 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a4f      	ldr	r2, [pc, #316]	; (8003654 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a4d      	ldr	r2, [pc, #308]	; (8003658 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8003526:	f241 01ef 	movw	r1, #4335	; 0x10ef
 800352a:	484c      	ldr	r0, [pc, #304]	; (800365c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800352c:	f7fd f9d5 	bl	80008da <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fb4a 	bl	8003bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69d9      	ldr	r1, [r3, #28]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	021a      	lsls	r2, r3, #8
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	61da      	str	r2, [r3, #28]
      break;
 8003570:	e061      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a34      	ldr	r2, [pc, #208]	; (8003648 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_TIM_PWM_ConfigChannel+0x400>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a35      	ldr	r2, [pc, #212]	; (8003658 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_TIM_PWM_ConfigChannel+0x400>
 8003586:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800358a:	4834      	ldr	r0, [pc, #208]	; (800365c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800358c:	f7fd f9a5 	bl	80008da <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fb92 	bl	8003cc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0208 	orr.w	r2, r2, #8
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035ce:	e032      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x45e>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x45e>
 80035e4:	f241 1111 	movw	r1, #4369	; 0x1111
 80035e8:	481c      	ldr	r0, [pc, #112]	; (800365c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80035ea:	f7fd f976 	bl	80008da <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fbc7 	bl	8003d88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003608:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800362e:	e002      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
      break;
 8003634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800363e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	08004600 	.word	0x08004600

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <TIM_Base_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a3d      	ldr	r2, [pc, #244]	; (8003778 <TIM_Base_SetConfig+0x118>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3c      	ldr	r2, [pc, #240]	; (800377c <TIM_Base_SetConfig+0x11c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3b      	ldr	r2, [pc, #236]	; (8003780 <TIM_Base_SetConfig+0x120>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3a      	ldr	r2, [pc, #232]	; (8003784 <TIM_Base_SetConfig+0x124>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a2f      	ldr	r2, [pc, #188]	; (8003774 <TIM_Base_SetConfig+0x114>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01f      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d01b      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <TIM_Base_SetConfig+0x118>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d017      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2b      	ldr	r2, [pc, #172]	; (800377c <TIM_Base_SetConfig+0x11c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2a      	ldr	r2, [pc, #168]	; (8003780 <TIM_Base_SetConfig+0x120>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00f      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a29      	ldr	r2, [pc, #164]	; (8003784 <TIM_Base_SetConfig+0x124>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00b      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a28      	ldr	r2, [pc, #160]	; (8003788 <TIM_Base_SetConfig+0x128>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a27      	ldr	r2, [pc, #156]	; (800378c <TIM_Base_SetConfig+0x12c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a26      	ldr	r2, [pc, #152]	; (8003790 <TIM_Base_SetConfig+0x130>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <TIM_Base_SetConfig+0x114>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00f      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <TIM_Base_SetConfig+0x124>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a11      	ldr	r2, [pc, #68]	; (8003788 <TIM_Base_SetConfig+0x128>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a10      	ldr	r2, [pc, #64]	; (800378c <TIM_Base_SetConfig+0x12c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <TIM_Base_SetConfig+0x130>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800

08003794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <TIM_OC1_SetConfig+0x158>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0302 	bic.w	r3, r3, #2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a41      	ldr	r2, [pc, #260]	; (80038f0 <TIM_OC1_SetConfig+0x15c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00f      	beq.n	8003810 <TIM_OC1_SetConfig+0x7c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a40      	ldr	r2, [pc, #256]	; (80038f4 <TIM_OC1_SetConfig+0x160>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00b      	beq.n	8003810 <TIM_OC1_SetConfig+0x7c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <TIM_OC1_SetConfig+0x164>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_OC1_SetConfig+0x7c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <TIM_OC1_SetConfig+0x168>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC1_SetConfig+0x7c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a3d      	ldr	r2, [pc, #244]	; (8003900 <TIM_OC1_SetConfig+0x16c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d119      	bne.n	8003844 <TIM_OC1_SetConfig+0xb0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <TIM_OC1_SetConfig+0x96>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d004      	beq.n	800382a <TIM_OC1_SetConfig+0x96>
 8003820:	f641 3161 	movw	r1, #7009	; 0x1b61
 8003824:	4837      	ldr	r0, [pc, #220]	; (8003904 <TIM_OC1_SetConfig+0x170>)
 8003826:	f7fd f858 	bl	80008da <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 0308 	bic.w	r3, r3, #8
 8003830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 0304 	bic.w	r3, r3, #4
 8003842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <TIM_OC1_SetConfig+0x15c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00f      	beq.n	800386c <TIM_OC1_SetConfig+0xd8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <TIM_OC1_SetConfig+0x160>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00b      	beq.n	800386c <TIM_OC1_SetConfig+0xd8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a28      	ldr	r2, [pc, #160]	; (80038f8 <TIM_OC1_SetConfig+0x164>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d007      	beq.n	800386c <TIM_OC1_SetConfig+0xd8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a27      	ldr	r2, [pc, #156]	; (80038fc <TIM_OC1_SetConfig+0x168>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_OC1_SetConfig+0xd8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a26      	ldr	r2, [pc, #152]	; (8003900 <TIM_OC1_SetConfig+0x16c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d12d      	bne.n	80038c8 <TIM_OC1_SetConfig+0x134>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003874:	d008      	beq.n	8003888 <TIM_OC1_SetConfig+0xf4>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <TIM_OC1_SetConfig+0xf4>
 800387e:	f641 316e 	movw	r1, #7022	; 0x1b6e
 8003882:	4820      	ldr	r0, [pc, #128]	; (8003904 <TIM_OC1_SetConfig+0x170>)
 8003884:	f7fd f829 	bl	80008da <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003890:	d008      	beq.n	80038a4 <TIM_OC1_SetConfig+0x110>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d004      	beq.n	80038a4 <TIM_OC1_SetConfig+0x110>
 800389a:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800389e:	4819      	ldr	r0, [pc, #100]	; (8003904 <TIM_OC1_SetConfig+0x170>)
 80038a0:	f7fd f81b 	bl	80008da <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	fffeff8f 	.word	0xfffeff8f
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800
 8003904:	08004600 	.word	0x08004600

08003908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f023 0210 	bic.w	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <TIM_OC2_SetConfig+0x148>)
 8003934:	4013      	ands	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0320 	bic.w	r3, r3, #32
 8003952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <TIM_OC2_SetConfig+0x14c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_OC2_SetConfig+0x68>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <TIM_OC2_SetConfig+0x150>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d11a      	bne.n	80039a6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <TIM_OC2_SetConfig+0x82>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d004      	beq.n	800398a <TIM_OC2_SetConfig+0x82>
 8003980:	f641 31ac 	movw	r1, #7084	; 0x1bac
 8003984:	4835      	ldr	r0, [pc, #212]	; (8003a5c <TIM_OC2_SetConfig+0x154>)
 8003986:	f7fc ffa8 	bl	80008da <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <TIM_OC2_SetConfig+0x14c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_OC2_SetConfig+0xc6>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <TIM_OC2_SetConfig+0x150>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_OC2_SetConfig+0xc6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a29      	ldr	r2, [pc, #164]	; (8003a60 <TIM_OC2_SetConfig+0x158>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_OC2_SetConfig+0xc6>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <TIM_OC2_SetConfig+0x15c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_OC2_SetConfig+0xc6>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <TIM_OC2_SetConfig+0x160>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d12f      	bne.n	8003a2e <TIM_OC2_SetConfig+0x126>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d6:	d008      	beq.n	80039ea <TIM_OC2_SetConfig+0xe2>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <TIM_OC2_SetConfig+0xe2>
 80039e0:	f641 31ba 	movw	r1, #7098	; 0x1bba
 80039e4:	481d      	ldr	r0, [pc, #116]	; (8003a5c <TIM_OC2_SetConfig+0x154>)
 80039e6:	f7fc ff78 	bl	80008da <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f2:	d008      	beq.n	8003a06 <TIM_OC2_SetConfig+0xfe>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <TIM_OC2_SetConfig+0xfe>
 80039fc:	f641 31bb 	movw	r1, #7099	; 0x1bbb
 8003a00:	4816      	ldr	r0, [pc, #88]	; (8003a5c <TIM_OC2_SetConfig+0x154>)
 8003a02:	f7fc ff6a 	bl	80008da <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	621a      	str	r2, [r3, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	feff8fff 	.word	0xfeff8fff
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	08004600 	.word	0x08004600
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800

08003a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <TIM_OC3_SetConfig+0x148>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <TIM_OC3_SetConfig+0x14c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_OC3_SetConfig+0x66>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a3b      	ldr	r2, [pc, #236]	; (8003bbc <TIM_OC3_SetConfig+0x150>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d11a      	bne.n	8003b08 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <TIM_OC3_SetConfig+0x80>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d004      	beq.n	8003aec <TIM_OC3_SetConfig+0x80>
 8003ae2:	f641 31f7 	movw	r1, #7159	; 0x1bf7
 8003ae6:	4836      	ldr	r0, [pc, #216]	; (8003bc0 <TIM_OC3_SetConfig+0x154>)
 8003ae8:	f7fc fef7 	bl	80008da <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	; (8003bb8 <TIM_OC3_SetConfig+0x14c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00f      	beq.n	8003b30 <TIM_OC3_SetConfig+0xc4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <TIM_OC3_SetConfig+0x150>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <TIM_OC3_SetConfig+0xc4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <TIM_OC3_SetConfig+0x158>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <TIM_OC3_SetConfig+0xc4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <TIM_OC3_SetConfig+0x15c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC3_SetConfig+0xc4>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <TIM_OC3_SetConfig+0x160>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d12f      	bne.n	8003b90 <TIM_OC3_SetConfig+0x124>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b38:	d008      	beq.n	8003b4c <TIM_OC3_SetConfig+0xe0>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <TIM_OC3_SetConfig+0xe0>
 8003b42:	f641 4104 	movw	r1, #7172	; 0x1c04
 8003b46:	481e      	ldr	r0, [pc, #120]	; (8003bc0 <TIM_OC3_SetConfig+0x154>)
 8003b48:	f7fc fec7 	bl	80008da <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b54:	d008      	beq.n	8003b68 <TIM_OC3_SetConfig+0xfc>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <TIM_OC3_SetConfig+0xfc>
 8003b5e:	f641 4105 	movw	r1, #7173	; 0x1c05
 8003b62:	4817      	ldr	r0, [pc, #92]	; (8003bc0 <TIM_OC3_SetConfig+0x154>)
 8003b64:	f7fc feb9 	bl	80008da <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	fffeff8f 	.word	0xfffeff8f
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40010400 	.word	0x40010400
 8003bc0:	08004600 	.word	0x08004600
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800

08003bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <TIM_OC4_SetConfig+0xd4>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	031b      	lsls	r3, r3, #12
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <TIM_OC4_SetConfig+0xd8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00f      	beq.n	8003c50 <TIM_OC4_SetConfig+0x80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <TIM_OC4_SetConfig+0xdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <TIM_OC4_SetConfig+0x80>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <TIM_OC4_SetConfig+0xe0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <TIM_OC4_SetConfig+0x80>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <TIM_OC4_SetConfig+0xe4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_OC4_SetConfig+0x80>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <TIM_OC4_SetConfig+0xe8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d117      	bne.n	8003c80 <TIM_OC4_SetConfig+0xb0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c58:	d008      	beq.n	8003c6c <TIM_OC4_SetConfig+0x9c>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <TIM_OC4_SetConfig+0x9c>
 8003c62:	f641 4143 	movw	r1, #7235	; 0x1c43
 8003c66:	4815      	ldr	r0, [pc, #84]	; (8003cbc <TIM_OC4_SetConfig+0xec>)
 8003c68:	f7fc fe37 	bl	80008da <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	019b      	lsls	r3, r3, #6
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	621a      	str	r2, [r3, #32]
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	feff8fff 	.word	0xfeff8fff
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40010400 	.word	0x40010400
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800
 8003cbc:	08004600 	.word	0x08004600

08003cc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <TIM_OC5_SetConfig+0xb0>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <TIM_OC5_SetConfig+0xb4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00f      	beq.n	8003d36 <TIM_OC5_SetConfig+0x76>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a17      	ldr	r2, [pc, #92]	; (8003d78 <TIM_OC5_SetConfig+0xb8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <TIM_OC5_SetConfig+0x76>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <TIM_OC5_SetConfig+0xbc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <TIM_OC5_SetConfig+0x76>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <TIM_OC5_SetConfig+0xc0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_OC5_SetConfig+0x76>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <TIM_OC5_SetConfig+0xc4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d109      	bne.n	8003d4a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	fffeff8f 	.word	0xfffeff8f
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40010400 	.word	0x40010400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800

08003d88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <TIM_OC6_SetConfig+0xb4>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	051b      	lsls	r3, r3, #20
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <TIM_OC6_SetConfig+0xb8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00f      	beq.n	8003e00 <TIM_OC6_SetConfig+0x78>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <TIM_OC6_SetConfig+0xbc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00b      	beq.n	8003e00 <TIM_OC6_SetConfig+0x78>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <TIM_OC6_SetConfig+0xc0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <TIM_OC6_SetConfig+0x78>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <TIM_OC6_SetConfig+0xc4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_OC6_SetConfig+0x78>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <TIM_OC6_SetConfig+0xc8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d109      	bne.n	8003e14 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	029b      	lsls	r3, r3, #10
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	feff8fff 	.word	0xfeff8fff
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400
 8003e50:	40014800 	.word	0x40014800

08003e54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a35      	ldr	r2, [pc, #212]	; (8003f38 <TIM_CCxChannelCmd+0xe4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d030      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d02c      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <TIM_CCxChannelCmd+0xe8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d028      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <TIM_CCxChannelCmd+0xec>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d024      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a30      	ldr	r2, [pc, #192]	; (8003f44 <TIM_CCxChannelCmd+0xf0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d020      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <TIM_CCxChannelCmd+0xf4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d01c      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a2e      	ldr	r2, [pc, #184]	; (8003f4c <TIM_CCxChannelCmd+0xf8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d018      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <TIM_CCxChannelCmd+0xfc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d014      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <TIM_CCxChannelCmd+0x100>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d010      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a2b      	ldr	r2, [pc, #172]	; (8003f58 <TIM_CCxChannelCmd+0x104>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00c      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <TIM_CCxChannelCmd+0x108>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d008      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <TIM_CCxChannelCmd+0x10c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <TIM_CCxChannelCmd+0x76>
 8003ec0:	f641 61b2 	movw	r1, #7858	; 0x1eb2
 8003ec4:	4827      	ldr	r0, [pc, #156]	; (8003f64 <TIM_CCxChannelCmd+0x110>)
 8003ec6:	f7fc fd08 	bl	80008da <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d016      	beq.n	8003efe <TIM_CCxChannelCmd+0xaa>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d013      	beq.n	8003efe <TIM_CCxChannelCmd+0xaa>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d010      	beq.n	8003efe <TIM_CCxChannelCmd+0xaa>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d00d      	beq.n	8003efe <TIM_CCxChannelCmd+0xaa>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d00a      	beq.n	8003efe <TIM_CCxChannelCmd+0xaa>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b14      	cmp	r3, #20
 8003eec:	d007      	beq.n	8003efe <TIM_CCxChannelCmd+0xaa>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b3c      	cmp	r3, #60	; 0x3c
 8003ef2:	d004      	beq.n	8003efe <TIM_CCxChannelCmd+0xaa>
 8003ef4:	f641 61b3 	movw	r1, #7859	; 0x1eb3
 8003ef8:	481a      	ldr	r0, [pc, #104]	; (8003f64 <TIM_CCxChannelCmd+0x110>)
 8003efa:	f7fc fcee 	bl	80008da <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2201      	movs	r2, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	401a      	ands	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	621a      	str	r2, [r3, #32]
}
 8003f30:	bf00      	nop
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40010400 	.word	0x40010400
 8003f4c:	40001800 	.word	0x40001800
 8003f50:	40001c00 	.word	0x40001c00
 8003f54:	40002000 	.word	0x40002000
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800
 8003f64:	08004600 	.word	0x08004600

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a37      	ldr	r2, [pc, #220]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d031      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f84:	d02c      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a33      	ldr	r2, [pc, #204]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d027      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a31      	ldr	r2, [pc, #196]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a30      	ldr	r2, [pc, #192]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d01d      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2e      	ldr	r2, [pc, #184]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2d      	ldr	r2, [pc, #180]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003fd6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003fda:	4827      	ldr	r0, [pc, #156]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fdc:	f7fc fc7d 	bl	80008da <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d01c      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d018      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b30      	cmp	r3, #48	; 0x30
 8003ffe:	d014      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d010      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b50      	cmp	r3, #80	; 0x50
 800400e:	d00c      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b60      	cmp	r3, #96	; 0x60
 8004016:	d008      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b70      	cmp	r3, #112	; 0x70
 800401e:	d004      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004020:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8004024:	4814      	ldr	r0, [pc, #80]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004026:	f7fc fc58 	bl	80008da <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b80      	cmp	r3, #128	; 0x80
 8004030:	d008      	beq.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800403a:	f240 71d2 	movw	r1, #2002	; 0x7d2
 800403e:	480e      	ldr	r0, [pc, #56]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004040:	f7fc fc4b 	bl	80008da <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d116      	bne.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800404e:	2302      	movs	r3, #2
 8004050:	e0db      	b.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x2a2>
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40001000 	.word	0x40001000
 8004068:	40001400 	.word	0x40001400
 800406c:	40010400 	.word	0x40010400
 8004070:	40001800 	.word	0x40001800
 8004074:	40014000 	.word	0x40014000
 8004078:	08004638 	.word	0x08004638
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a5c      	ldr	r2, [pc, #368]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5b      	ldr	r2, [pc, #364]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d161      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d054      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c0:	d04f      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ca:	d04a      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040d4:	d045      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040de:	d040      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80040e8:	d03b      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040f2:	d036      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040fc:	d031      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004106:	d02c      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004110:	d027      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800411a:	d022      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004124:	d01d      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800412e:	d018      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004138:	d013      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8004142:	d00e      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800414c:	d009      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8004156:	d004      	beq.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8004158:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800415c:	482f      	ldr	r0, [pc, #188]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 800415e:	f7fc fbbc 	bl	80008da <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004168:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a20      	ldr	r2, [pc, #128]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d01d      	beq.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d018      	beq.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0x2bc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a17      	ldr	r2, [pc, #92]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d10c      	bne.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x290>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400
 800421c:	08004638 	.word	0x08004638
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40001800 	.word	0x40001800
 8004230:	40014000 	.word	0x40014000

08004234 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a91      	ldr	r2, [pc, #580]	; (800448c <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d018      	beq.n	800427e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a8f      	ldr	r2, [pc, #572]	; (8004490 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a8e      	ldr	r2, [pc, #568]	; (8004494 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a8c      	ldr	r2, [pc, #560]	; (8004498 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a8b      	ldr	r2, [pc, #556]	; (800449c <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8004274:	f640 0119 	movw	r1, #2073	; 0x819
 8004278:	4889      	ldr	r0, [pc, #548]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800427a:	f7fc fb2e 	bl	80008da <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004286:	d008      	beq.n	800429a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d004      	beq.n	800429a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8004290:	f640 011a 	movw	r1, #2074	; 0x81a
 8004294:	4882      	ldr	r0, [pc, #520]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8004296:	f7fc fb20 	bl	80008da <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a2:	d008      	beq.n	80042b6 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80042ac:	f640 011b 	movw	r1, #2075	; 0x81b
 80042b0:	487b      	ldr	r0, [pc, #492]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80042b2:	f7fc fb12 	bl	80008da <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d013      	beq.n	80042e6 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d0:	d009      	beq.n	80042e6 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042da:	d004      	beq.n	80042e6 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80042dc:	f640 011c 	movw	r1, #2076	; 0x81c
 80042e0:	486f      	ldr	r0, [pc, #444]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80042e2:	f7fc fafa 	bl	80008da <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2bff      	cmp	r3, #255	; 0xff
 80042ec:	d904      	bls.n	80042f8 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 80042ee:	f640 011d 	movw	r1, #2077	; 0x81d
 80042f2:	486b      	ldr	r0, [pc, #428]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80042f4:	f7fc faf1 	bl	80008da <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d008      	beq.n	8004314 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800430a:	f640 011e 	movw	r1, #2078	; 0x81e
 800430e:	4864      	ldr	r0, [pc, #400]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8004310:	f7fc fae3 	bl	80008da <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d004      	beq.n	8004330 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004326:	f640 011f 	movw	r1, #2079	; 0x81f
 800432a:	485d      	ldr	r0, [pc, #372]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800432c:	f7fc fad5 	bl	80008da <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b0f      	cmp	r3, #15
 8004336:	d904      	bls.n	8004342 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004338:	f44f 6102 	mov.w	r1, #2080	; 0x820
 800433c:	4858      	ldr	r0, [pc, #352]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800433e:	f7fc facc 	bl	80008da <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800434a:	d008      	beq.n	800435e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004354:	f640 0121 	movw	r1, #2081	; 0x821
 8004358:	4851      	ldr	r0, [pc, #324]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800435a:	f7fc fabe 	bl	80008da <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 8004368:	2302      	movs	r3, #2
 800436a:	e08a      	b.n	8004482 <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	041b      	lsls	r3, r3, #16
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a28      	ldr	r2, [pc, #160]	; (800448c <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a26      	ldr	r2, [pc, #152]	; (8004490 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d13a      	bne.n	8004470 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004402:	d008      	beq.n	8004416 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800440c:	f640 0141 	movw	r1, #2113	; 0x841
 8004410:	4823      	ldr	r0, [pc, #140]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8004412:	f7fc fa62 	bl	80008da <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004426:	d004      	beq.n	8004432 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8004428:	f640 0142 	movw	r1, #2114	; 0x842
 800442c:	481c      	ldr	r0, [pc, #112]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800442e:	f7fc fa54 	bl	80008da <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b0f      	cmp	r3, #15
 8004438:	d904      	bls.n	8004444 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800443a:	f640 0143 	movw	r1, #2115	; 0x843
 800443e:	4818      	ldr	r0, [pc, #96]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8004440:	f7fc fa4b 	bl	80008da <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	051b      	lsls	r3, r3, #20
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40010400 	.word	0x40010400
 8004494:	40014000 	.word	0x40014000
 8004498:	40014400 	.word	0x40014400
 800449c:	40014800 	.word	0x40014800
 80044a0:	08004638 	.word	0x08004638

080044a4 <memset>:
 80044a4:	4402      	add	r2, r0
 80044a6:	4603      	mov	r3, r0
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d100      	bne.n	80044ae <memset+0xa>
 80044ac:	4770      	bx	lr
 80044ae:	f803 1b01 	strb.w	r1, [r3], #1
 80044b2:	e7f9      	b.n	80044a8 <memset+0x4>

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4d0d      	ldr	r5, [pc, #52]	; (80044ec <__libc_init_array+0x38>)
 80044b8:	4c0d      	ldr	r4, [pc, #52]	; (80044f0 <__libc_init_array+0x3c>)
 80044ba:	1b64      	subs	r4, r4, r5
 80044bc:	10a4      	asrs	r4, r4, #2
 80044be:	2600      	movs	r6, #0
 80044c0:	42a6      	cmp	r6, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	4d0b      	ldr	r5, [pc, #44]	; (80044f4 <__libc_init_array+0x40>)
 80044c6:	4c0c      	ldr	r4, [pc, #48]	; (80044f8 <__libc_init_array+0x44>)
 80044c8:	f000 f818 	bl	80044fc <_init>
 80044cc:	1b64      	subs	r4, r4, r5
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	2600      	movs	r6, #0
 80044d2:	42a6      	cmp	r6, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044dc:	4798      	blx	r3
 80044de:	3601      	adds	r6, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e6:	4798      	blx	r3
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	08004684 	.word	0x08004684
 80044f0:	08004684 	.word	0x08004684
 80044f4:	08004684 	.word	0x08004684
 80044f8:	08004688 	.word	0x08004688

080044fc <_init>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	bf00      	nop
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr

08004508 <_fini>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	bf00      	nop
 800450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450e:	bc08      	pop	{r3}
 8004510:	469e      	mov	lr, r3
 8004512:	4770      	bx	lr
